
masterSPITest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  0000083c  000008d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800248  00800248  00000918  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001161  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea1  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000520  00000000  00000000  00002a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000699  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c1  00000000  00000000  00003681  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00003742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e3       	ldi	r30, 0x3C	; 60
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 34       	cpi	r26, 0x48	; 72
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e4       	ldi	r26, 0x48	; 72
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 34       	cpi	r26, 0x4E	; 78
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1f d0       	rcall	.+62     	; 0x15e <main>
 120:	8b c3       	rjmp	.+1814   	; 0x838 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <USART_init>:

static void
USART_init(uint16_t ubrr)
{
    /* Set baud rate in the USART Baud Rate Registers (UBRR) */
    UBRR0H = (unsigned char) (ubrr >> 8);
 124:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    UBRR0L = (unsigned char) ubrr;
 128:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    
    /* Enable receiver and transmitter on RX0 and TX0 */
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0); 
 12c:	e1 ec       	ldi	r30, 0xC1	; 193
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 61       	ori	r24, 0x18	; 24
 134:	80 83       	st	Z, r24
    
    /* Set frame format: 8 bit data, 2 stop bit */
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 136:	e2 ec       	ldi	r30, 0xC2	; 194
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8e 60       	ori	r24, 0x0E	; 14
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <USART_Transmit>:

static void
USART_Transmit(unsigned char data, FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 142:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 146:	95 ff       	sbrs	r25, 5
 148:	fc cf       	rjmp	.-8      	; 0x142 <USART_Transmit>
    {
        ;
    }
    
    /* Puts the data into a buffer, then sends/transmits the data */
    UDR0 = data;
 14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 14e:	08 95       	ret

00000150 <USART_Receive>:

static char
USART_Receive(FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 150:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 154:	85 ff       	sbrs	r24, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <USART_Receive>
    {
        ;
    }
    
    /* Get the received data from the buffer */
    return UDR0;
 158:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 15c:	08 95       	ret

0000015e <main>:
FILE uart_output = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);

int 
main(void)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	a8 97       	sbiw	r28, 0x28	; 40
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
    /* set SS, MOSI and SCK as output, pins 53 (PB0), 51 (PB2) and 52 (PB1) */
    DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // SS as output
 172:	84 b1       	in	r24, 0x04	; 4
 174:	87 60       	ori	r24, 0x07	; 7
 176:	84 b9       	out	0x04, r24	; 4
    /* set SPI enable and master/slave select, making MEGA the master */
    SPCR |= (1 << 6) | (1 << 4);
 178:	8c b5       	in	r24, 0x2c	; 44
 17a:	80 65       	ori	r24, 0x50	; 80
 17c:	8c bd       	out	0x2c, r24	; 44
    /* set SPI clock rate to 1 MHz */
    SPCR |= (1 << 0);
 17e:	8c b5       	in	r24, 0x2c	; 44
 180:	81 60       	ori	r24, 0x01	; 1
 182:	8c bd       	out	0x2c, r24	; 44
    
    // initialize the UART with 9600 BAUD
    USART_init(MYUBRR);
 184:	87 e6       	ldi	r24, 0x67	; 103
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	cd df       	rcall	.-102    	; 0x124 <USART_init>
        
    // redirect the stdin and stdout to UART functions
    stdout = &uart_output;
 18a:	e8 e4       	ldi	r30, 0x48	; 72
 18c:	f2 e0       	ldi	r31, 0x02	; 2
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	93 83       	std	Z+3, r25	; 0x03
 194:	82 83       	std	Z+2, r24	; 0x02
    stdin = &uart_input;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	92 e0       	ldi	r25, 0x02	; 2
 19a:	91 83       	std	Z+1, r25	; 0x01
    
    unsigned char spi_send_data[20];
    unsigned char spi_receive_data[20];
    
	init_uart();
 19c:	80 83       	st	Z, r24
 19e:	48 d0       	rcall	.+144    	; 0x230 <init_uart>
	
    /* send message to slave and receive message from slave */
    while (1) 
    {
        /* send byte to slave and receive a byte from slave */
        PORTB &= ~(1 << PB0); // SS LOW
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	85 b9       	out	0x05, r24	; 5
            
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	18 c0       	rjmp	.+48     	; 0x1da <main+0x7c>
        {
                
            SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 1aa:	08 2e       	mov	r0, r24
 1ac:	00 0c       	add	r0, r0
 1ae:	99 0b       	sbc	r25, r25
 1b0:	e1 e0       	ldi	r30, 0x01	; 1
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ec 0f       	add	r30, r28
 1b6:	fd 1f       	adc	r31, r29
 1b8:	e8 0f       	add	r30, r24
 1ba:	f9 1f       	adc	r31, r25
 1bc:	30 81       	ld	r19, Z
 1be:	3e bd       	out	0x2e, r19	; 46
 
            while(!(SPSR & (1 << SPIF)))
 1c0:	0d b4       	in	r0, 0x2d	; 45
 1c2:	07 fe       	sbrs	r0, 7
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <main+0x62>
            {
                /* wait until the transmission is complete */
                ;
            }
            
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 1c6:	3e b5       	in	r19, 0x2e	; 46
 1c8:	e5 e1       	ldi	r30, 0x15	; 21
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ec 0f       	add	r30, r28
 1ce:	fd 1f       	adc	r31, r29
 1d0:	e8 0f       	add	r30, r24
 1d2:	f9 1f       	adc	r31, r25
 1d4:	30 83       	st	Z, r19
    while (1) 
    {
        /* send byte to slave and receive a byte from slave */
        PORTB &= ~(1 << PB0); // SS LOW
            
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	82 0f       	add	r24, r18
 1da:	28 2f       	mov	r18, r24
 1dc:	84 31       	cpi	r24, 0x14	; 20
 1de:	28 f3       	brcs	.-54     	; 0x1aa <main+0x4c>
            }
            
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
        }
            
        PORTB |= (1 << PB0); // SS HIGH
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	85 b9       	out	0x05, r24	; 5
        printf("DATA RECEIVED \n");
 1e6:	88 e3       	ldi	r24, 0x38	; 56
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	49 d0       	rcall	.+146    	; 0x27e <puts>
        printf(spi_receive_data);
 1ec:	ce 01       	movw	r24, r28
 1ee:	45 96       	adiw	r24, 0x15	; 21
 1f0:	9f 93       	push	r25
 1f2:	8f 93       	push	r24
 1f4:	31 d0       	rcall	.+98     	; 0x258 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	87 ea       	ldi	r24, 0xA7	; 167
 1fa:	91 e6       	ldi	r25, 0x61	; 97
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x9e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0xa8>
 206:	00 00       	nop
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	c9 cf       	rjmp	.-110    	; 0x1a0 <main+0x42>

0000020e <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 20e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 212:	95 ff       	sbrs	r25, 5
 214:	fc cf       	rjmp	.-8      	; 0x20e <uart_putchar>
	UDR0 = c;
 216:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 0;
}
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 95       	ret

00000220 <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
 220:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 224:	88 23       	and	r24, r24
 226:	e4 f7       	brge	.-8      	; 0x220 <uart_getchar>
	return UDR0;
 228:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	08 95       	ret

00000230 <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 230:	88 e1       	ldi	r24, 0x18	; 24
 232:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
 236:	87 e6       	ldi	r24, 0x67	; 103
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 23e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	stdout = &mystdout;
 242:	e8 e4       	ldi	r30, 0x48	; 72
 244:	f2 e0       	ldi	r31, 0x02	; 2
 246:	8a e2       	ldi	r24, 0x2A	; 42
 248:	92 e0       	ldi	r25, 0x02	; 2
 24a:	93 83       	std	Z+3, r25	; 0x03
 24c:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
 24e:	8c e1       	ldi	r24, 0x1C	; 28
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <printf>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	ae 01       	movw	r20, r28
 262:	4a 5f       	subi	r20, 0xFA	; 250
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	fa 01       	movw	r30, r20
 268:	61 91       	ld	r22, Z+
 26a:	71 91       	ld	r23, Z+
 26c:	af 01       	movw	r20, r30
 26e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end+0x2>
 272:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__data_end+0x3>
 276:	33 d0       	rcall	.+102    	; 0x2de <vfprintf>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <puts>:
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <__data_end+0x2>
 28a:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <__data_end+0x3>
 28e:	23 81       	ldd	r18, Z+3	; 0x03
 290:	21 ff       	sbrs	r18, 1
 292:	1b c0       	rjmp	.+54     	; 0x2ca <puts+0x4c>
 294:	8c 01       	movw	r16, r24
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	c0 e0       	ldi	r28, 0x00	; 0
 29a:	f8 01       	movw	r30, r16
 29c:	81 91       	ld	r24, Z+
 29e:	8f 01       	movw	r16, r30
 2a0:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <__data_end+0x2>
 2a4:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <__data_end+0x3>
 2a8:	db 01       	movw	r26, r22
 2aa:	18 96       	adiw	r26, 0x08	; 8
 2ac:	ed 91       	ld	r30, X+
 2ae:	fc 91       	ld	r31, X
 2b0:	19 97       	sbiw	r26, 0x09	; 9
 2b2:	88 23       	and	r24, r24
 2b4:	31 f0       	breq	.+12     	; 0x2c2 <puts+0x44>
 2b6:	19 95       	eicall
 2b8:	89 2b       	or	r24, r25
 2ba:	79 f3       	breq	.-34     	; 0x29a <puts+0x1c>
 2bc:	df ef       	ldi	r29, 0xFF	; 255
 2be:	cf ef       	ldi	r28, 0xFF	; 255
 2c0:	ec cf       	rjmp	.-40     	; 0x29a <puts+0x1c>
 2c2:	8a e0       	ldi	r24, 0x0A	; 10
 2c4:	19 95       	eicall
 2c6:	89 2b       	or	r24, r25
 2c8:	19 f0       	breq	.+6      	; 0x2d0 <puts+0x52>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <puts+0x56>
 2d0:	8d 2f       	mov	r24, r29
 2d2:	9c 2f       	mov	r25, r28
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <vfprintf>:
 2de:	2f 92       	push	r2
 2e0:	3f 92       	push	r3
 2e2:	4f 92       	push	r4
 2e4:	5f 92       	push	r5
 2e6:	6f 92       	push	r6
 2e8:	7f 92       	push	r7
 2ea:	8f 92       	push	r8
 2ec:	9f 92       	push	r9
 2ee:	af 92       	push	r10
 2f0:	bf 92       	push	r11
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	2b 97       	sbiw	r28, 0x0b	; 11
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
 312:	6c 01       	movw	r12, r24
 314:	7b 01       	movw	r14, r22
 316:	8a 01       	movw	r16, r20
 318:	fc 01       	movw	r30, r24
 31a:	17 82       	std	Z+7, r1	; 0x07
 31c:	16 82       	std	Z+6, r1	; 0x06
 31e:	83 81       	ldd	r24, Z+3	; 0x03
 320:	81 ff       	sbrs	r24, 1
 322:	bf c1       	rjmp	.+894    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	3c 01       	movw	r6, r24
 32a:	f6 01       	movw	r30, r12
 32c:	93 81       	ldd	r25, Z+3	; 0x03
 32e:	f7 01       	movw	r30, r14
 330:	93 fd       	sbrc	r25, 3
 332:	85 91       	lpm	r24, Z+
 334:	93 ff       	sbrs	r25, 3
 336:	81 91       	ld	r24, Z+
 338:	7f 01       	movw	r14, r30
 33a:	88 23       	and	r24, r24
 33c:	09 f4       	brne	.+2      	; 0x340 <vfprintf+0x62>
 33e:	ad c1       	rjmp	.+858    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 340:	85 32       	cpi	r24, 0x25	; 37
 342:	39 f4       	brne	.+14     	; 0x352 <vfprintf+0x74>
 344:	93 fd       	sbrc	r25, 3
 346:	85 91       	lpm	r24, Z+
 348:	93 ff       	sbrs	r25, 3
 34a:	81 91       	ld	r24, Z+
 34c:	7f 01       	movw	r14, r30
 34e:	85 32       	cpi	r24, 0x25	; 37
 350:	21 f4       	brne	.+8      	; 0x35a <vfprintf+0x7c>
 352:	b6 01       	movw	r22, r12
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	d6 d1       	rcall	.+940    	; 0x704 <fputc>
 358:	e8 cf       	rjmp	.-48     	; 0x32a <vfprintf+0x4c>
 35a:	91 2c       	mov	r9, r1
 35c:	21 2c       	mov	r2, r1
 35e:	31 2c       	mov	r3, r1
 360:	ff e1       	ldi	r31, 0x1F	; 31
 362:	f3 15       	cp	r31, r3
 364:	d8 f0       	brcs	.+54     	; 0x39c <vfprintf+0xbe>
 366:	8b 32       	cpi	r24, 0x2B	; 43
 368:	79 f0       	breq	.+30     	; 0x388 <vfprintf+0xaa>
 36a:	38 f4       	brcc	.+14     	; 0x37a <vfprintf+0x9c>
 36c:	80 32       	cpi	r24, 0x20	; 32
 36e:	79 f0       	breq	.+30     	; 0x38e <vfprintf+0xb0>
 370:	83 32       	cpi	r24, 0x23	; 35
 372:	a1 f4       	brne	.+40     	; 0x39c <vfprintf+0xbe>
 374:	23 2d       	mov	r18, r3
 376:	20 61       	ori	r18, 0x10	; 16
 378:	1d c0       	rjmp	.+58     	; 0x3b4 <vfprintf+0xd6>
 37a:	8d 32       	cpi	r24, 0x2D	; 45
 37c:	61 f0       	breq	.+24     	; 0x396 <vfprintf+0xb8>
 37e:	80 33       	cpi	r24, 0x30	; 48
 380:	69 f4       	brne	.+26     	; 0x39c <vfprintf+0xbe>
 382:	23 2d       	mov	r18, r3
 384:	21 60       	ori	r18, 0x01	; 1
 386:	16 c0       	rjmp	.+44     	; 0x3b4 <vfprintf+0xd6>
 388:	83 2d       	mov	r24, r3
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	38 2e       	mov	r3, r24
 38e:	e3 2d       	mov	r30, r3
 390:	e4 60       	ori	r30, 0x04	; 4
 392:	3e 2e       	mov	r3, r30
 394:	2a c0       	rjmp	.+84     	; 0x3ea <vfprintf+0x10c>
 396:	f3 2d       	mov	r31, r3
 398:	f8 60       	ori	r31, 0x08	; 8
 39a:	1d c0       	rjmp	.+58     	; 0x3d6 <vfprintf+0xf8>
 39c:	37 fc       	sbrc	r3, 7
 39e:	2d c0       	rjmp	.+90     	; 0x3fa <vfprintf+0x11c>
 3a0:	20 ed       	ldi	r18, 0xD0	; 208
 3a2:	28 0f       	add	r18, r24
 3a4:	2a 30       	cpi	r18, 0x0A	; 10
 3a6:	40 f0       	brcs	.+16     	; 0x3b8 <vfprintf+0xda>
 3a8:	8e 32       	cpi	r24, 0x2E	; 46
 3aa:	b9 f4       	brne	.+46     	; 0x3da <vfprintf+0xfc>
 3ac:	36 fc       	sbrc	r3, 6
 3ae:	75 c1       	rjmp	.+746    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 3b0:	23 2d       	mov	r18, r3
 3b2:	20 64       	ori	r18, 0x40	; 64
 3b4:	32 2e       	mov	r3, r18
 3b6:	19 c0       	rjmp	.+50     	; 0x3ea <vfprintf+0x10c>
 3b8:	36 fe       	sbrs	r3, 6
 3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <vfprintf+0xea>
 3bc:	8a e0       	ldi	r24, 0x0A	; 10
 3be:	98 9e       	mul	r9, r24
 3c0:	20 0d       	add	r18, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	92 2e       	mov	r9, r18
 3c6:	11 c0       	rjmp	.+34     	; 0x3ea <vfprintf+0x10c>
 3c8:	ea e0       	ldi	r30, 0x0A	; 10
 3ca:	2e 9e       	mul	r2, r30
 3cc:	20 0d       	add	r18, r0
 3ce:	11 24       	eor	r1, r1
 3d0:	22 2e       	mov	r2, r18
 3d2:	f3 2d       	mov	r31, r3
 3d4:	f0 62       	ori	r31, 0x20	; 32
 3d6:	3f 2e       	mov	r3, r31
 3d8:	08 c0       	rjmp	.+16     	; 0x3ea <vfprintf+0x10c>
 3da:	8c 36       	cpi	r24, 0x6C	; 108
 3dc:	21 f4       	brne	.+8      	; 0x3e6 <vfprintf+0x108>
 3de:	83 2d       	mov	r24, r3
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	38 2e       	mov	r3, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <vfprintf+0x10c>
 3e6:	88 36       	cpi	r24, 0x68	; 104
 3e8:	41 f4       	brne	.+16     	; 0x3fa <vfprintf+0x11c>
 3ea:	f7 01       	movw	r30, r14
 3ec:	93 fd       	sbrc	r25, 3
 3ee:	85 91       	lpm	r24, Z+
 3f0:	93 ff       	sbrs	r25, 3
 3f2:	81 91       	ld	r24, Z+
 3f4:	7f 01       	movw	r14, r30
 3f6:	81 11       	cpse	r24, r1
 3f8:	b3 cf       	rjmp	.-154    	; 0x360 <vfprintf+0x82>
 3fa:	98 2f       	mov	r25, r24
 3fc:	9f 7d       	andi	r25, 0xDF	; 223
 3fe:	95 54       	subi	r25, 0x45	; 69
 400:	93 30       	cpi	r25, 0x03	; 3
 402:	28 f4       	brcc	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	0c 5f       	subi	r16, 0xFC	; 252
 406:	1f 4f       	sbci	r17, 0xFF	; 255
 408:	9f e3       	ldi	r25, 0x3F	; 63
 40a:	99 83       	std	Y+1, r25	; 0x01
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40e:	83 36       	cpi	r24, 0x63	; 99
 410:	31 f0       	breq	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 412:	83 37       	cpi	r24, 0x73	; 115
 414:	71 f0       	breq	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 416:	83 35       	cpi	r24, 0x53	; 83
 418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	55 c0       	rjmp	.+170    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 41c:	20 c0       	rjmp	.+64     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 41e:	f8 01       	movw	r30, r16
 420:	80 81       	ld	r24, Z
 422:	89 83       	std	Y+1, r24	; 0x01
 424:	0e 5f       	subi	r16, 0xFE	; 254
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	88 24       	eor	r8, r8
 42a:	83 94       	inc	r8
 42c:	91 2c       	mov	r9, r1
 42e:	53 01       	movw	r10, r6
 430:	12 c0       	rjmp	.+36     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 432:	28 01       	movw	r4, r16
 434:	f2 e0       	ldi	r31, 0x02	; 2
 436:	4f 0e       	add	r4, r31
 438:	51 1c       	adc	r5, r1
 43a:	f8 01       	movw	r30, r16
 43c:	a0 80       	ld	r10, Z
 43e:	b1 80       	ldd	r11, Z+1	; 0x01
 440:	36 fe       	sbrs	r3, 6
 442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 444:	69 2d       	mov	r22, r9
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	6f ef       	ldi	r22, 0xFF	; 255
 44c:	7f ef       	ldi	r23, 0xFF	; 255
 44e:	c5 01       	movw	r24, r10
 450:	4e d1       	rcall	.+668    	; 0x6ee <strnlen>
 452:	4c 01       	movw	r8, r24
 454:	82 01       	movw	r16, r4
 456:	f3 2d       	mov	r31, r3
 458:	ff 77       	andi	r31, 0x7F	; 127
 45a:	3f 2e       	mov	r3, r31
 45c:	15 c0       	rjmp	.+42     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 45e:	28 01       	movw	r4, r16
 460:	22 e0       	ldi	r18, 0x02	; 2
 462:	42 0e       	add	r4, r18
 464:	51 1c       	adc	r5, r1
 466:	f8 01       	movw	r30, r16
 468:	a0 80       	ld	r10, Z
 46a:	b1 80       	ldd	r11, Z+1	; 0x01
 46c:	36 fe       	sbrs	r3, 6
 46e:	03 c0       	rjmp	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 470:	69 2d       	mov	r22, r9
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 476:	6f ef       	ldi	r22, 0xFF	; 255
 478:	7f ef       	ldi	r23, 0xFF	; 255
 47a:	c5 01       	movw	r24, r10
 47c:	2d d1       	rcall	.+602    	; 0x6d8 <strnlen_P>
 47e:	4c 01       	movw	r8, r24
 480:	f3 2d       	mov	r31, r3
 482:	f0 68       	ori	r31, 0x80	; 128
 484:	3f 2e       	mov	r3, r31
 486:	82 01       	movw	r16, r4
 488:	33 fc       	sbrc	r3, 3
 48a:	19 c0       	rjmp	.+50     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 48c:	82 2d       	mov	r24, r2
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	88 16       	cp	r8, r24
 492:	99 06       	cpc	r9, r25
 494:	a0 f4       	brcc	.+40     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 496:	b6 01       	movw	r22, r12
 498:	80 e2       	ldi	r24, 0x20	; 32
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	33 d1       	rcall	.+614    	; 0x704 <fputc>
 49e:	2a 94       	dec	r2
 4a0:	f5 cf       	rjmp	.-22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 4a2:	f5 01       	movw	r30, r10
 4a4:	37 fc       	sbrc	r3, 7
 4a6:	85 91       	lpm	r24, Z+
 4a8:	37 fe       	sbrs	r3, 7
 4aa:	81 91       	ld	r24, Z+
 4ac:	5f 01       	movw	r10, r30
 4ae:	b6 01       	movw	r22, r12
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	28 d1       	rcall	.+592    	; 0x704 <fputc>
 4b4:	21 10       	cpse	r2, r1
 4b6:	2a 94       	dec	r2
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	82 1a       	sub	r8, r18
 4bc:	91 08       	sbc	r9, r1
 4be:	81 14       	cp	r8, r1
 4c0:	91 04       	cpc	r9, r1
 4c2:	79 f7       	brne	.-34     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4c4:	e1 c0       	rjmp	.+450    	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 4c6:	84 36       	cpi	r24, 0x64	; 100
 4c8:	11 f0       	breq	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ca:	89 36       	cpi	r24, 0x69	; 105
 4cc:	39 f5       	brne	.+78     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 4ce:	f8 01       	movw	r30, r16
 4d0:	37 fe       	sbrs	r3, 7
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d4:	60 81       	ld	r22, Z
 4d6:	71 81       	ldd	r23, Z+1	; 0x01
 4d8:	82 81       	ldd	r24, Z+2	; 0x02
 4da:	93 81       	ldd	r25, Z+3	; 0x03
 4dc:	0c 5f       	subi	r16, 0xFC	; 252
 4de:	1f 4f       	sbci	r17, 0xFF	; 255
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4e2:	60 81       	ld	r22, Z
 4e4:	71 81       	ldd	r23, Z+1	; 0x01
 4e6:	07 2e       	mov	r0, r23
 4e8:	00 0c       	add	r0, r0
 4ea:	88 0b       	sbc	r24, r24
 4ec:	99 0b       	sbc	r25, r25
 4ee:	0e 5f       	subi	r16, 0xFE	; 254
 4f0:	1f 4f       	sbci	r17, 0xFF	; 255
 4f2:	f3 2d       	mov	r31, r3
 4f4:	ff 76       	andi	r31, 0x6F	; 111
 4f6:	3f 2e       	mov	r3, r31
 4f8:	97 ff       	sbrs	r25, 7
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 4fc:	90 95       	com	r25
 4fe:	80 95       	com	r24
 500:	70 95       	com	r23
 502:	61 95       	neg	r22
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	8f 4f       	sbci	r24, 0xFF	; 255
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	f0 68       	ori	r31, 0x80	; 128
 50c:	3f 2e       	mov	r3, r31
 50e:	2a e0       	ldi	r18, 0x0A	; 10
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	a3 01       	movw	r20, r6
 514:	33 d1       	rcall	.+614    	; 0x77c <__ultoa_invert>
 516:	88 2e       	mov	r8, r24
 518:	86 18       	sub	r8, r6
 51a:	44 c0       	rjmp	.+136    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 51c:	85 37       	cpi	r24, 0x75	; 117
 51e:	31 f4       	brne	.+12     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 520:	23 2d       	mov	r18, r3
 522:	2f 7e       	andi	r18, 0xEF	; 239
 524:	b2 2e       	mov	r11, r18
 526:	2a e0       	ldi	r18, 0x0A	; 10
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	25 c0       	rjmp	.+74     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 52c:	93 2d       	mov	r25, r3
 52e:	99 7f       	andi	r25, 0xF9	; 249
 530:	b9 2e       	mov	r11, r25
 532:	8f 36       	cpi	r24, 0x6F	; 111
 534:	c1 f0       	breq	.+48     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 536:	18 f4       	brcc	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 538:	88 35       	cpi	r24, 0x58	; 88
 53a:	79 f0       	breq	.+30     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 53c:	ae c0       	rjmp	.+348    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 53e:	80 37       	cpi	r24, 0x70	; 112
 540:	19 f0       	breq	.+6      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 542:	88 37       	cpi	r24, 0x78	; 120
 544:	21 f0       	breq	.+8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 546:	a9 c0       	rjmp	.+338    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 548:	e9 2f       	mov	r30, r25
 54a:	e0 61       	ori	r30, 0x10	; 16
 54c:	be 2e       	mov	r11, r30
 54e:	b4 fe       	sbrs	r11, 4
 550:	0d c0       	rjmp	.+26     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 552:	fb 2d       	mov	r31, r11
 554:	f4 60       	ori	r31, 0x04	; 4
 556:	bf 2e       	mov	r11, r31
 558:	09 c0       	rjmp	.+18     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 55a:	34 fe       	sbrs	r3, 4
 55c:	0a c0       	rjmp	.+20     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 55e:	29 2f       	mov	r18, r25
 560:	26 60       	ori	r18, 0x06	; 6
 562:	b2 2e       	mov	r11, r18
 564:	06 c0       	rjmp	.+12     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 566:	28 e0       	ldi	r18, 0x08	; 8
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	05 c0       	rjmp	.+10     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 56c:	20 e1       	ldi	r18, 0x10	; 16
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 572:	20 e1       	ldi	r18, 0x10	; 16
 574:	32 e0       	ldi	r19, 0x02	; 2
 576:	f8 01       	movw	r30, r16
 578:	b7 fe       	sbrs	r11, 7
 57a:	07 c0       	rjmp	.+14     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 57c:	60 81       	ld	r22, Z
 57e:	71 81       	ldd	r23, Z+1	; 0x01
 580:	82 81       	ldd	r24, Z+2	; 0x02
 582:	93 81       	ldd	r25, Z+3	; 0x03
 584:	0c 5f       	subi	r16, 0xFC	; 252
 586:	1f 4f       	sbci	r17, 0xFF	; 255
 588:	06 c0       	rjmp	.+12     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 58a:	60 81       	ld	r22, Z
 58c:	71 81       	ldd	r23, Z+1	; 0x01
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 5f       	subi	r16, 0xFE	; 254
 594:	1f 4f       	sbci	r17, 0xFF	; 255
 596:	a3 01       	movw	r20, r6
 598:	f1 d0       	rcall	.+482    	; 0x77c <__ultoa_invert>
 59a:	88 2e       	mov	r8, r24
 59c:	86 18       	sub	r8, r6
 59e:	fb 2d       	mov	r31, r11
 5a0:	ff 77       	andi	r31, 0x7F	; 127
 5a2:	3f 2e       	mov	r3, r31
 5a4:	36 fe       	sbrs	r3, 6
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5a8:	23 2d       	mov	r18, r3
 5aa:	2e 7f       	andi	r18, 0xFE	; 254
 5ac:	a2 2e       	mov	r10, r18
 5ae:	89 14       	cp	r8, r9
 5b0:	58 f4       	brcc	.+22     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5b2:	34 fe       	sbrs	r3, 4
 5b4:	0b c0       	rjmp	.+22     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5b6:	32 fc       	sbrc	r3, 2
 5b8:	09 c0       	rjmp	.+18     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5ba:	83 2d       	mov	r24, r3
 5bc:	8e 7e       	andi	r24, 0xEE	; 238
 5be:	a8 2e       	mov	r10, r24
 5c0:	05 c0       	rjmp	.+10     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5c2:	b8 2c       	mov	r11, r8
 5c4:	a3 2c       	mov	r10, r3
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c8:	b8 2c       	mov	r11, r8
 5ca:	01 c0       	rjmp	.+2      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5cc:	b9 2c       	mov	r11, r9
 5ce:	a4 fe       	sbrs	r10, 4
 5d0:	0f c0       	rjmp	.+30     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5d2:	fe 01       	movw	r30, r28
 5d4:	e8 0d       	add	r30, r8
 5d6:	f1 1d       	adc	r31, r1
 5d8:	80 81       	ld	r24, Z
 5da:	80 33       	cpi	r24, 0x30	; 48
 5dc:	21 f4       	brne	.+8      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5de:	9a 2d       	mov	r25, r10
 5e0:	99 7e       	andi	r25, 0xE9	; 233
 5e2:	a9 2e       	mov	r10, r25
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5e6:	a2 fe       	sbrs	r10, 2
 5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5ea:	b3 94       	inc	r11
 5ec:	b3 94       	inc	r11
 5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f0:	8a 2d       	mov	r24, r10
 5f2:	86 78       	andi	r24, 0x86	; 134
 5f4:	09 f0       	breq	.+2      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f6:	b3 94       	inc	r11
 5f8:	a3 fc       	sbrc	r10, 3
 5fa:	10 c0       	rjmp	.+32     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 5fc:	a0 fe       	sbrs	r10, 0
 5fe:	06 c0       	rjmp	.+12     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 600:	b2 14       	cp	r11, r2
 602:	80 f4       	brcc	.+32     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 604:	28 0c       	add	r2, r8
 606:	92 2c       	mov	r9, r2
 608:	9b 18       	sub	r9, r11
 60a:	0d c0       	rjmp	.+26     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 60c:	b2 14       	cp	r11, r2
 60e:	58 f4       	brcc	.+22     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 610:	b6 01       	movw	r22, r12
 612:	80 e2       	ldi	r24, 0x20	; 32
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	76 d0       	rcall	.+236    	; 0x704 <fputc>
 618:	b3 94       	inc	r11
 61a:	f8 cf       	rjmp	.-16     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 61c:	b2 14       	cp	r11, r2
 61e:	18 f4       	brcc	.+6      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 620:	2b 18       	sub	r2, r11
 622:	02 c0       	rjmp	.+4      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 624:	98 2c       	mov	r9, r8
 626:	21 2c       	mov	r2, r1
 628:	a4 fe       	sbrs	r10, 4
 62a:	0f c0       	rjmp	.+30     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 62c:	b6 01       	movw	r22, r12
 62e:	80 e3       	ldi	r24, 0x30	; 48
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	68 d0       	rcall	.+208    	; 0x704 <fputc>
 634:	a2 fe       	sbrs	r10, 2
 636:	16 c0       	rjmp	.+44     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 638:	a1 fc       	sbrc	r10, 1
 63a:	03 c0       	rjmp	.+6      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 63c:	88 e7       	ldi	r24, 0x78	; 120
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 642:	88 e5       	ldi	r24, 0x58	; 88
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	b6 01       	movw	r22, r12
 648:	0c c0       	rjmp	.+24     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 64a:	8a 2d       	mov	r24, r10
 64c:	86 78       	andi	r24, 0x86	; 134
 64e:	51 f0       	breq	.+20     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 650:	a1 fe       	sbrs	r10, 1
 652:	02 c0       	rjmp	.+4      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 654:	8b e2       	ldi	r24, 0x2B	; 43
 656:	01 c0       	rjmp	.+2      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 658:	80 e2       	ldi	r24, 0x20	; 32
 65a:	a7 fc       	sbrc	r10, 7
 65c:	8d e2       	ldi	r24, 0x2D	; 45
 65e:	b6 01       	movw	r22, r12
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	50 d0       	rcall	.+160    	; 0x704 <fputc>
 664:	89 14       	cp	r8, r9
 666:	30 f4       	brcc	.+12     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 668:	b6 01       	movw	r22, r12
 66a:	80 e3       	ldi	r24, 0x30	; 48
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	4a d0       	rcall	.+148    	; 0x704 <fputc>
 670:	9a 94       	dec	r9
 672:	f8 cf       	rjmp	.-16     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 674:	8a 94       	dec	r8
 676:	f3 01       	movw	r30, r6
 678:	e8 0d       	add	r30, r8
 67a:	f1 1d       	adc	r31, r1
 67c:	80 81       	ld	r24, Z
 67e:	b6 01       	movw	r22, r12
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	40 d0       	rcall	.+128    	; 0x704 <fputc>
 684:	81 10       	cpse	r8, r1
 686:	f6 cf       	rjmp	.-20     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 688:	22 20       	and	r2, r2
 68a:	09 f4       	brne	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 68c:	4e ce       	rjmp	.-868    	; 0x32a <vfprintf+0x4c>
 68e:	b6 01       	movw	r22, r12
 690:	80 e2       	ldi	r24, 0x20	; 32
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	37 d0       	rcall	.+110    	; 0x704 <fputc>
 696:	2a 94       	dec	r2
 698:	f7 cf       	rjmp	.-18     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 69a:	f6 01       	movw	r30, r12
 69c:	86 81       	ldd	r24, Z+6	; 0x06
 69e:	97 81       	ldd	r25, Z+7	; 0x07
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	9f ef       	ldi	r25, 0xFF	; 255
 6a6:	2b 96       	adiw	r28, 0x0b	; 11
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	df 90       	pop	r13
 6c0:	cf 90       	pop	r12
 6c2:	bf 90       	pop	r11
 6c4:	af 90       	pop	r10
 6c6:	9f 90       	pop	r9
 6c8:	8f 90       	pop	r8
 6ca:	7f 90       	pop	r7
 6cc:	6f 90       	pop	r6
 6ce:	5f 90       	pop	r5
 6d0:	4f 90       	pop	r4
 6d2:	3f 90       	pop	r3
 6d4:	2f 90       	pop	r2
 6d6:	08 95       	ret

000006d8 <strnlen_P>:
 6d8:	fc 01       	movw	r30, r24
 6da:	05 90       	lpm	r0, Z+
 6dc:	61 50       	subi	r22, 0x01	; 1
 6de:	70 40       	sbci	r23, 0x00	; 0
 6e0:	01 10       	cpse	r0, r1
 6e2:	d8 f7       	brcc	.-10     	; 0x6da <strnlen_P+0x2>
 6e4:	80 95       	com	r24
 6e6:	90 95       	com	r25
 6e8:	8e 0f       	add	r24, r30
 6ea:	9f 1f       	adc	r25, r31
 6ec:	08 95       	ret

000006ee <strnlen>:
 6ee:	fc 01       	movw	r30, r24
 6f0:	61 50       	subi	r22, 0x01	; 1
 6f2:	70 40       	sbci	r23, 0x00	; 0
 6f4:	01 90       	ld	r0, Z+
 6f6:	01 10       	cpse	r0, r1
 6f8:	d8 f7       	brcc	.-10     	; 0x6f0 <strnlen+0x2>
 6fa:	80 95       	com	r24
 6fc:	90 95       	com	r25
 6fe:	8e 0f       	add	r24, r30
 700:	9f 1f       	adc	r25, r31
 702:	08 95       	ret

00000704 <fputc>:
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	fb 01       	movw	r30, r22
 70e:	23 81       	ldd	r18, Z+3	; 0x03
 710:	21 fd       	sbrc	r18, 1
 712:	03 c0       	rjmp	.+6      	; 0x71a <fputc+0x16>
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	9f ef       	ldi	r25, 0xFF	; 255
 718:	2c c0       	rjmp	.+88     	; 0x772 <fputc+0x6e>
 71a:	22 ff       	sbrs	r18, 2
 71c:	16 c0       	rjmp	.+44     	; 0x74a <fputc+0x46>
 71e:	46 81       	ldd	r20, Z+6	; 0x06
 720:	57 81       	ldd	r21, Z+7	; 0x07
 722:	24 81       	ldd	r18, Z+4	; 0x04
 724:	35 81       	ldd	r19, Z+5	; 0x05
 726:	42 17       	cp	r20, r18
 728:	53 07       	cpc	r21, r19
 72a:	44 f4       	brge	.+16     	; 0x73c <fputc+0x38>
 72c:	a0 81       	ld	r26, Z
 72e:	b1 81       	ldd	r27, Z+1	; 0x01
 730:	9d 01       	movw	r18, r26
 732:	2f 5f       	subi	r18, 0xFF	; 255
 734:	3f 4f       	sbci	r19, 0xFF	; 255
 736:	31 83       	std	Z+1, r19	; 0x01
 738:	20 83       	st	Z, r18
 73a:	8c 93       	st	X, r24
 73c:	26 81       	ldd	r18, Z+6	; 0x06
 73e:	37 81       	ldd	r19, Z+7	; 0x07
 740:	2f 5f       	subi	r18, 0xFF	; 255
 742:	3f 4f       	sbci	r19, 0xFF	; 255
 744:	37 83       	std	Z+7, r19	; 0x07
 746:	26 83       	std	Z+6, r18	; 0x06
 748:	14 c0       	rjmp	.+40     	; 0x772 <fputc+0x6e>
 74a:	8b 01       	movw	r16, r22
 74c:	ec 01       	movw	r28, r24
 74e:	fb 01       	movw	r30, r22
 750:	00 84       	ldd	r0, Z+8	; 0x08
 752:	f1 85       	ldd	r31, Z+9	; 0x09
 754:	e0 2d       	mov	r30, r0
 756:	19 95       	eicall
 758:	89 2b       	or	r24, r25
 75a:	e1 f6       	brne	.-72     	; 0x714 <fputc+0x10>
 75c:	d8 01       	movw	r26, r16
 75e:	16 96       	adiw	r26, 0x06	; 6
 760:	8d 91       	ld	r24, X+
 762:	9c 91       	ld	r25, X
 764:	17 97       	sbiw	r26, 0x07	; 7
 766:	01 96       	adiw	r24, 0x01	; 1
 768:	17 96       	adiw	r26, 0x07	; 7
 76a:	9c 93       	st	X, r25
 76c:	8e 93       	st	-X, r24
 76e:	16 97       	sbiw	r26, 0x06	; 6
 770:	ce 01       	movw	r24, r28
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	08 95       	ret

0000077c <__ultoa_invert>:
 77c:	fa 01       	movw	r30, r20
 77e:	aa 27       	eor	r26, r26
 780:	28 30       	cpi	r18, 0x08	; 8
 782:	51 f1       	breq	.+84     	; 0x7d8 <__ultoa_invert+0x5c>
 784:	20 31       	cpi	r18, 0x10	; 16
 786:	81 f1       	breq	.+96     	; 0x7e8 <__ultoa_invert+0x6c>
 788:	e8 94       	clt
 78a:	6f 93       	push	r22
 78c:	6e 7f       	andi	r22, 0xFE	; 254
 78e:	6e 5f       	subi	r22, 0xFE	; 254
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	af 4f       	sbci	r26, 0xFF	; 255
 798:	b1 e0       	ldi	r27, 0x01	; 1
 79a:	3e d0       	rcall	.+124    	; 0x818 <__ultoa_invert+0x9c>
 79c:	b4 e0       	ldi	r27, 0x04	; 4
 79e:	3c d0       	rcall	.+120    	; 0x818 <__ultoa_invert+0x9c>
 7a0:	67 0f       	add	r22, r23
 7a2:	78 1f       	adc	r23, r24
 7a4:	89 1f       	adc	r24, r25
 7a6:	9a 1f       	adc	r25, r26
 7a8:	a1 1d       	adc	r26, r1
 7aa:	68 0f       	add	r22, r24
 7ac:	79 1f       	adc	r23, r25
 7ae:	8a 1f       	adc	r24, r26
 7b0:	91 1d       	adc	r25, r1
 7b2:	a1 1d       	adc	r26, r1
 7b4:	6a 0f       	add	r22, r26
 7b6:	71 1d       	adc	r23, r1
 7b8:	81 1d       	adc	r24, r1
 7ba:	91 1d       	adc	r25, r1
 7bc:	a1 1d       	adc	r26, r1
 7be:	20 d0       	rcall	.+64     	; 0x800 <__ultoa_invert+0x84>
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <__ultoa_invert+0x48>
 7c2:	68 94       	set
 7c4:	3f 91       	pop	r19
 7c6:	2a e0       	ldi	r18, 0x0A	; 10
 7c8:	26 9f       	mul	r18, r22
 7ca:	11 24       	eor	r1, r1
 7cc:	30 19       	sub	r19, r0
 7ce:	30 5d       	subi	r19, 0xD0	; 208
 7d0:	31 93       	st	Z+, r19
 7d2:	de f6       	brtc	.-74     	; 0x78a <__ultoa_invert+0xe>
 7d4:	cf 01       	movw	r24, r30
 7d6:	08 95       	ret
 7d8:	46 2f       	mov	r20, r22
 7da:	47 70       	andi	r20, 0x07	; 7
 7dc:	40 5d       	subi	r20, 0xD0	; 208
 7de:	41 93       	st	Z+, r20
 7e0:	b3 e0       	ldi	r27, 0x03	; 3
 7e2:	0f d0       	rcall	.+30     	; 0x802 <__ultoa_invert+0x86>
 7e4:	c9 f7       	brne	.-14     	; 0x7d8 <__ultoa_invert+0x5c>
 7e6:	f6 cf       	rjmp	.-20     	; 0x7d4 <__ultoa_invert+0x58>
 7e8:	46 2f       	mov	r20, r22
 7ea:	4f 70       	andi	r20, 0x0F	; 15
 7ec:	40 5d       	subi	r20, 0xD0	; 208
 7ee:	4a 33       	cpi	r20, 0x3A	; 58
 7f0:	18 f0       	brcs	.+6      	; 0x7f8 <__ultoa_invert+0x7c>
 7f2:	49 5d       	subi	r20, 0xD9	; 217
 7f4:	31 fd       	sbrc	r19, 1
 7f6:	40 52       	subi	r20, 0x20	; 32
 7f8:	41 93       	st	Z+, r20
 7fa:	02 d0       	rcall	.+4      	; 0x800 <__ultoa_invert+0x84>
 7fc:	a9 f7       	brne	.-22     	; 0x7e8 <__ultoa_invert+0x6c>
 7fe:	ea cf       	rjmp	.-44     	; 0x7d4 <__ultoa_invert+0x58>
 800:	b4 e0       	ldi	r27, 0x04	; 4
 802:	a6 95       	lsr	r26
 804:	97 95       	ror	r25
 806:	87 95       	ror	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	ba 95       	dec	r27
 80e:	c9 f7       	brne	.-14     	; 0x802 <__ultoa_invert+0x86>
 810:	00 97       	sbiw	r24, 0x00	; 0
 812:	61 05       	cpc	r22, r1
 814:	71 05       	cpc	r23, r1
 816:	08 95       	ret
 818:	9b 01       	movw	r18, r22
 81a:	ac 01       	movw	r20, r24
 81c:	0a 2e       	mov	r0, r26
 81e:	06 94       	lsr	r0
 820:	57 95       	ror	r21
 822:	47 95       	ror	r20
 824:	37 95       	ror	r19
 826:	27 95       	ror	r18
 828:	ba 95       	dec	r27
 82a:	c9 f7       	brne	.-14     	; 0x81e <__ultoa_invert+0xa2>
 82c:	62 0f       	add	r22, r18
 82e:	73 1f       	adc	r23, r19
 830:	84 1f       	adc	r24, r20
 832:	95 1f       	adc	r25, r21
 834:	a0 1d       	adc	r26, r0
 836:	08 95       	ret

00000838 <_exit>:
 838:	f8 94       	cli

0000083a <__stop_program>:
 83a:	ff cf       	rjmp	.-2      	; 0x83a <__stop_program>
