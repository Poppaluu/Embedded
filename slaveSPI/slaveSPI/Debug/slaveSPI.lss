
slaveSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00000b4a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800174  00800174  00000c52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9f  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097f  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052b  00000000  00000000  0000238e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f6  00000000  00000000  00002f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 37       	cpi	r26, 0x74	; 116
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e7       	ldi	r26, 0x74	; 116
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 39       	cpi	r26, 0x91	; 145
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  9e:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_putchar>
	UDR0 = c;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	88 23       	and	r24, r24
  be:	e4 f7       	brge	.-8      	; 0xb8 <uart_getchar>
	return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  c8:	88 e1       	ldi	r24, 0x18	; 24
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	stdout = &mystdout;
  da:	eb e8       	ldi	r30, 0x8B	; 139
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	93 83       	std	Z+3, r25	; 0x03
  e4:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	91 83       	std	Z+1, r25	; 0x01
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <USART_init>:
bool movementDetected = false;

static void USART_init(uint16_t ubrr) // unsigned int
{
    /* Set baud rate in the USART Baud Rate Registers (UBRR) */
    UBRR0H = (unsigned char) (ubrr >> 8);
  f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char) ubrr;
  f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    
    /* Enable receiver and transmitter on RX0 and TX0 */
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //NOTE: the ATmega328p has 1 UART: 0
  f8:	e1 ec       	ldi	r30, 0xC1	; 193
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 61       	ori	r24, 0x18	; 24
 100:	80 83       	st	Z, r24
    
    /* Set frame format: 8 bit data, 2 stop bit */
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 102:	e2 ec       	ldi	r30, 0xC2	; 194
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8e 60       	ori	r24, 0x0E	; 14
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <USART_Transmit>:
}

static void USART_Transmit(unsigned char data, FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 10e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 112:	95 ff       	sbrs	r25, 5
 114:	fc cf       	rjmp	.-8      	; 0x10e <USART_Transmit>
    {
        ;
    }
    
    /* Put the data into a buffer, then send/transmit the data */
    UDR0 = data;
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11a:	08 95       	ret

0000011c <USART_Receive>:
}

static char USART_Receive(FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 11c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 120:	85 ff       	sbrs	r24, 5
 122:	fc cf       	rjmp	.-8      	; 0x11c <USART_Receive>
    {
        ;
    }
    
    /* Get the received data from the buffer */
    return UDR0;
 124:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 128:	08 95       	ret

0000012a <__vector_17>:
volatile int8_t g_spi_index = 0;
volatile int8_t g_spi_receive_index = 0;

/* use interrupts to send receive message */
ISR (SPI_STC_vect)
{   
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
    unsigned char spi_interrupt_byte = SPDR;
 14c:	9e b5       	in	r25, 0x2e	; 46
    unsigned char transfer_end_check = '\n';
    SPDR = g_spi_send_data[g_spi_index];
 14e:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <g_spi_index>
 152:	0e 2e       	mov	r0, r30
 154:	00 0c       	add	r0, r0
 156:	ff 0b       	sbc	r31, r31
 158:	e4 5e       	subi	r30, 0xE4	; 228
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	80 81       	ld	r24, Z
 15e:	8e bd       	out	0x2e, r24	; 46
    g_spi_index++;
 160:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <g_spi_index>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <g_spi_index>
    
    if(g_spi_receive_index < sizeof(g_spi_receive_data))
 16a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <__data_end>
 16e:	84 31       	cpi	r24, 0x14	; 20
 170:	c8 f4       	brcc	.+50     	; 0x1a4 <__vector_17+0x7a>
    {
        g_spi_receive_data[g_spi_receive_index++] = spi_interrupt_byte;
 172:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <__data_end>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	8e 0f       	add	r24, r30
 17a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
 17e:	0e 2e       	mov	r0, r30
 180:	00 0c       	add	r0, r0
 182:	ff 0b       	sbc	r31, r31
 184:	e9 58       	subi	r30, 0x89	; 137
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	90 83       	st	Z, r25
        
        /* check if the received byte == '\n' */
        if (transfer_end_check == spi_interrupt_byte)
 18a:	9a 30       	cpi	r25, 0x0A	; 10
 18c:	59 f4       	brne	.+22     	; 0x1a4 <__vector_17+0x7a>
        {
            g_b_is_transfer_complete = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <g_b_is_transfer_complete>
			printf("RECEIVED");
 194:	8c e4       	ldi	r24, 0x4C	; 76
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	9f 93       	push	r25
 19a:	8f 93       	push	r24
 19c:	0e 94 c5 02 	call	0x58a	; 0x58a <printf>
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
        }
        
    }
    
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <init>:

void init() {
	// set trigger pin as output and echo pin as input
	DDRB |= (1 << TRIGGER_PIN);
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << ECHO_PIN);
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	8d 7f       	andi	r24, 0xFD	; 253
 1d0:	84 b9       	out	0x04, r24	; 4

	// set timer1 prescaler to 8 and enable overflow interrupt
	TCCR1B |= (1 << CS11);
 1d2:	e1 e8       	ldi	r30, 0x81	; 129
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1);
 1dc:	ef e6       	ldi	r30, 0x6F	; 111
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <main>:
	uint32_t prev_distance_cm = 0;
	(void)time_us; // suppress unused variable warning
	char buffer[20];
	(void)buffer; // suppress unused variable warning
	
	init();
 1e8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <init>
	init_uart();
 1ec:	0e 94 64 00 	call	0xc8	; 0xc8 <init_uart>
	printf("Starting the scan...");
 1f0:	85 e5       	ldi	r24, 0x55	; 85
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	9f 93       	push	r25
 1f6:	8f 93       	push	r24
 1f8:	0e 94 c5 02 	call	0x58a	; 0x58a <printf>
	
    /* set MISO as output, pin 12 (PB4)*/
    DDRB  |= (1 << PB4);
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	80 61       	ori	r24, 0x10	; 16
 200:	84 b9       	out	0x04, r24	; 4
    /* set SPI enable (SPE) and interrupt enable (SPIE) */
    SPCR  |= (1 << 6) | (1 << 7);
 202:	8c b5       	in	r24, 0x2c	; 44
 204:	80 6c       	ori	r24, 0xC0	; 192
 206:	8c bd       	out	0x2c, r24	; 44
    SPDR = 0;
 208:	1e bc       	out	0x2e, r1	; 46
    
    // enable global interrupts
    sei();
 20a:	78 94       	sei
    
    // initialize the UART with 9600 BAUD
    USART_init(MYUBRR);
 20c:	87 e6       	ldi	r24, 0x67	; 103
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 78 00 	call	0xf0	; 0xf0 <USART_init>
    
    // redirect the stdin and stdout to UART functions
    stdout = &uart_output;
 214:	eb e8       	ldi	r30, 0x8B	; 139
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	8e e3       	ldi	r24, 0x3E	; 62
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	93 83       	std	Z+3, r25	; 0x03
 21e:	82 83       	std	Z+2, r24	; 0x02
    stdin = &uart_input;
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	91 83       	std	Z+1, r25	; 0x01
 226:	80 83       	st	Z, r24
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0

int main(void)
{
	uint16_t time_us;
	uint32_t distance_cm = 0;
	uint32_t prev_distance_cm = 0;
 22c:	81 2c       	mov	r8, r1
 22e:	91 2c       	mov	r9, r1
 230:	54 01       	movw	r10, r8
 232:	02 c0       	rjmp	.+4      	; 0x238 <main+0x50>
}

void init_uart(void);

int main(void)
{
 234:	46 01       	movw	r8, r12
 236:	57 01       	movw	r10, r14
    /* send message to master and receive message from master */
    while (1) 
    {
		//printf("%d\n", movementDetected);
		// send a 10us pulse to the trigger pin to start a measurement
		PORTB |= (1 << TRIGGER_PIN);
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	85 e3       	ldi	r24, 0x35	; 53
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x58>
 244:	00 00       	nop
		_delay_us(10);
		PORTB &= ~(1 << TRIGGER_PIN);
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8e 7f       	andi	r24, 0xFE	; 254
 24a:	85 b9       	out	0x05, r24	; 5
		
		// wait for the echo pin to go high
		while (!(PINB & (1 << ECHO_PIN)));
 24c:	19 9b       	sbis	0x03, 1	; 3
 24e:	fe cf       	rjmp	.-4      	; 0x24c <main+0x64>

		// start timer1
		TCNT1 = 0;
 250:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 254:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

		// wait for the echo pin to go low
		while (PINB & (1 << ECHO_PIN));
 258:	19 99       	sbic	0x03, 1	; 3
 25a:	fe cf       	rjmp	.-4      	; 0x258 <main+0x70>

		// stop timer1 and calculate the time it took for the sound to travel
		// from the sensor to the object and back
		time_us = TCNT1 * 0.5;
 25c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 260:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 bb 01 	call	0x376	; 0x376 <__floatunsisf>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	5f e3       	ldi	r21, 0x3F	; 63
 274:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
 278:	0e 94 8c 01 	call	0x318	; 0x318 <__fixunssfsi>

		// calculate the distance in centimeters
		distance_cm = time_us / 58;
 27c:	9b 01       	movw	r18, r22
 27e:	af e9       	ldi	r26, 0x9F	; 159
 280:	b6 e4       	ldi	r27, 0x46	; 70
 282:	0e 94 b6 02 	call	0x56c	; 0x56c <__umulhisi3>
 286:	92 95       	swap	r25
 288:	82 95       	swap	r24
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	89 27       	eor	r24, r25
 28e:	9f 70       	andi	r25, 0x0F	; 15
 290:	89 27       	eor	r24, r25
 292:	6c 01       	movw	r12, r24
 294:	e1 2c       	mov	r14, r1
 296:	f1 2c       	mov	r15, r1

		// initialize prev_distance_cm to the first measured distance value
		if (prev_distance_cm == 0) {
 298:	81 14       	cp	r8, r1
 29a:	91 04       	cpc	r9, r1
 29c:	a1 04       	cpc	r10, r1
 29e:	b1 04       	cpc	r11, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <main+0xbe>
			prev_distance_cm = distance_cm;
 2a2:	46 01       	movw	r8, r12
 2a4:	57 01       	movw	r10, r14
		}

		// check if the difference between the current distance and the previous
		// distance is greater than a threshold (10 cm in this case)

		if (abs(distance_cm - prev_distance_cm) > 10) {
 2a6:	b7 01       	movw	r22, r14
 2a8:	a6 01       	movw	r20, r12
 2aa:	48 19       	sub	r20, r8
 2ac:	59 09       	sbc	r21, r9
 2ae:	6a 09       	sbc	r22, r10
 2b0:	7b 09       	sbc	r23, r11
 2b2:	ca 01       	movw	r24, r20
 2b4:	99 23       	and	r25, r25
 2b6:	24 f4       	brge	.+8      	; 0x2c0 <main+0xd8>
 2b8:	88 27       	eor	r24, r24
 2ba:	99 27       	eor	r25, r25
 2bc:	84 1b       	sub	r24, r20
 2be:	95 0b       	sbc	r25, r21
 2c0:	0b 97       	sbiw	r24, 0x0b	; 11
 2c2:	44 f0       	brlt	.+16     	; 0x2d4 <main+0xec>
			//SEND MESSAGE TO MASTER
			//movementDetected = true;
			printf("MOVEMENT");
 2c4:	8a e6       	ldi	r24, 0x6A	; 106
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	0e 94 c5 02 	call	0x58a	; 0x58a <printf>
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
		// update the previous distance with the current distance
		prev_distance_cm = distance_cm;
		
		
		
        if(1 == g_b_is_transfer_complete)
 2d4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <g_b_is_transfer_complete>
 2d8:	88 23       	and	r24, r24
 2da:	09 f4       	brne	.+2      	; 0x2de <main+0xf6>
 2dc:	ab cf       	rjmp	.-170    	; 0x234 <main+0x4c>
        {
            printf(g_spi_receive_data);
 2de:	87 e7       	ldi	r24, 0x77	; 119
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	9f 93       	push	r25
 2e4:	8f 93       	push	r24
 2e6:	0e 94 c5 02 	call	0x58a	; 0x58a <printf>
            g_b_is_transfer_complete = 0;
 2ea:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <g_b_is_transfer_complete>
            g_spi_index = 0;
 2ee:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <g_spi_index>
            g_spi_receive_index = 0;
 2f2:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <__data_end>
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	9c cf       	rjmp	.-200    	; 0x234 <main+0x4c>

000002fc <__vector_13>:
    
    return 0;
}

// timer1 overflow interrupt service routine
ISR(TIMER1_OVF_vect) {
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
	// reset timer1
	TCNT1 = 0;
 306:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 30a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__fixunssfsi>:
 318:	0e 94 00 02 	call	0x400	; 0x400 <__fp_splitA>
 31c:	88 f0       	brcs	.+34     	; 0x340 <__fixunssfsi+0x28>
 31e:	9f 57       	subi	r25, 0x7F	; 127
 320:	98 f0       	brcs	.+38     	; 0x348 <__fixunssfsi+0x30>
 322:	b9 2f       	mov	r27, r25
 324:	99 27       	eor	r25, r25
 326:	b7 51       	subi	r27, 0x17	; 23
 328:	b0 f0       	brcs	.+44     	; 0x356 <__fixunssfsi+0x3e>
 32a:	e1 f0       	breq	.+56     	; 0x364 <__fixunssfsi+0x4c>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	88 1f       	adc	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	1a f0       	brmi	.+6      	; 0x33c <__fixunssfsi+0x24>
 336:	ba 95       	dec	r27
 338:	c9 f7       	brne	.-14     	; 0x32c <__fixunssfsi+0x14>
 33a:	14 c0       	rjmp	.+40     	; 0x364 <__fixunssfsi+0x4c>
 33c:	b1 30       	cpi	r27, 0x01	; 1
 33e:	91 f0       	breq	.+36     	; 0x364 <__fixunssfsi+0x4c>
 340:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_zero>
 344:	b1 e0       	ldi	r27, 0x01	; 1
 346:	08 95       	ret
 348:	0c 94 1a 02 	jmp	0x434	; 0x434 <__fp_zero>
 34c:	67 2f       	mov	r22, r23
 34e:	78 2f       	mov	r23, r24
 350:	88 27       	eor	r24, r24
 352:	b8 5f       	subi	r27, 0xF8	; 248
 354:	39 f0       	breq	.+14     	; 0x364 <__fixunssfsi+0x4c>
 356:	b9 3f       	cpi	r27, 0xF9	; 249
 358:	cc f3       	brlt	.-14     	; 0x34c <__fixunssfsi+0x34>
 35a:	86 95       	lsr	r24
 35c:	77 95       	ror	r23
 35e:	67 95       	ror	r22
 360:	b3 95       	inc	r27
 362:	d9 f7       	brne	.-10     	; 0x35a <__fixunssfsi+0x42>
 364:	3e f4       	brtc	.+14     	; 0x374 <__fixunssfsi+0x5c>
 366:	90 95       	com	r25
 368:	80 95       	com	r24
 36a:	70 95       	com	r23
 36c:	61 95       	neg	r22
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	8f 4f       	sbci	r24, 0xFF	; 255
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	08 95       	ret

00000376 <__floatunsisf>:
 376:	e8 94       	clt
 378:	09 c0       	rjmp	.+18     	; 0x38c <__floatsisf+0x12>

0000037a <__floatsisf>:
 37a:	97 fb       	bst	r25, 7
 37c:	3e f4       	brtc	.+14     	; 0x38c <__floatsisf+0x12>
 37e:	90 95       	com	r25
 380:	80 95       	com	r24
 382:	70 95       	com	r23
 384:	61 95       	neg	r22
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	8f 4f       	sbci	r24, 0xFF	; 255
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
 38c:	99 23       	and	r25, r25
 38e:	a9 f0       	breq	.+42     	; 0x3ba <__floatsisf+0x40>
 390:	f9 2f       	mov	r31, r25
 392:	96 e9       	ldi	r25, 0x96	; 150
 394:	bb 27       	eor	r27, r27
 396:	93 95       	inc	r25
 398:	f6 95       	lsr	r31
 39a:	87 95       	ror	r24
 39c:	77 95       	ror	r23
 39e:	67 95       	ror	r22
 3a0:	b7 95       	ror	r27
 3a2:	f1 11       	cpse	r31, r1
 3a4:	f8 cf       	rjmp	.-16     	; 0x396 <__floatsisf+0x1c>
 3a6:	fa f4       	brpl	.+62     	; 0x3e6 <__floatsisf+0x6c>
 3a8:	bb 0f       	add	r27, r27
 3aa:	11 f4       	brne	.+4      	; 0x3b0 <__floatsisf+0x36>
 3ac:	60 ff       	sbrs	r22, 0
 3ae:	1b c0       	rjmp	.+54     	; 0x3e6 <__floatsisf+0x6c>
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	8f 4f       	sbci	r24, 0xFF	; 255
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	16 c0       	rjmp	.+44     	; 0x3e6 <__floatsisf+0x6c>
 3ba:	88 23       	and	r24, r24
 3bc:	11 f0       	breq	.+4      	; 0x3c2 <__floatsisf+0x48>
 3be:	96 e9       	ldi	r25, 0x96	; 150
 3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <__floatsisf+0x6a>
 3c2:	77 23       	and	r23, r23
 3c4:	21 f0       	breq	.+8      	; 0x3ce <__floatsisf+0x54>
 3c6:	9e e8       	ldi	r25, 0x8E	; 142
 3c8:	87 2f       	mov	r24, r23
 3ca:	76 2f       	mov	r23, r22
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <__floatsisf+0x5e>
 3ce:	66 23       	and	r22, r22
 3d0:	71 f0       	breq	.+28     	; 0x3ee <__floatsisf+0x74>
 3d2:	96 e8       	ldi	r25, 0x86	; 134
 3d4:	86 2f       	mov	r24, r22
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	2a f0       	brmi	.+10     	; 0x3e6 <__floatsisf+0x6c>
 3dc:	9a 95       	dec	r25
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	88 1f       	adc	r24, r24
 3e4:	da f7       	brpl	.-10     	; 0x3dc <__floatsisf+0x62>
 3e6:	88 0f       	add	r24, r24
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	97 f9       	bld	r25, 7
 3ee:	08 95       	ret

000003f0 <__fp_split3>:
 3f0:	57 fd       	sbrc	r21, 7
 3f2:	90 58       	subi	r25, 0x80	; 128
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	59 f0       	breq	.+22     	; 0x410 <__fp_splitA+0x10>
 3fa:	5f 3f       	cpi	r21, 0xFF	; 255
 3fc:	71 f0       	breq	.+28     	; 0x41a <__fp_splitA+0x1a>
 3fe:	47 95       	ror	r20

00000400 <__fp_splitA>:
 400:	88 0f       	add	r24, r24
 402:	97 fb       	bst	r25, 7
 404:	99 1f       	adc	r25, r25
 406:	61 f0       	breq	.+24     	; 0x420 <__fp_splitA+0x20>
 408:	9f 3f       	cpi	r25, 0xFF	; 255
 40a:	79 f0       	breq	.+30     	; 0x42a <__fp_splitA+0x2a>
 40c:	87 95       	ror	r24
 40e:	08 95       	ret
 410:	12 16       	cp	r1, r18
 412:	13 06       	cpc	r1, r19
 414:	14 06       	cpc	r1, r20
 416:	55 1f       	adc	r21, r21
 418:	f2 cf       	rjmp	.-28     	; 0x3fe <__fp_split3+0xe>
 41a:	46 95       	lsr	r20
 41c:	f1 df       	rcall	.-30     	; 0x400 <__fp_splitA>
 41e:	08 c0       	rjmp	.+16     	; 0x430 <__fp_splitA+0x30>
 420:	16 16       	cp	r1, r22
 422:	17 06       	cpc	r1, r23
 424:	18 06       	cpc	r1, r24
 426:	99 1f       	adc	r25, r25
 428:	f1 cf       	rjmp	.-30     	; 0x40c <__fp_splitA+0xc>
 42a:	86 95       	lsr	r24
 42c:	71 05       	cpc	r23, r1
 42e:	61 05       	cpc	r22, r1
 430:	08 94       	sec
 432:	08 95       	ret

00000434 <__fp_zero>:
 434:	e8 94       	clt

00000436 <__fp_szero>:
 436:	bb 27       	eor	r27, r27
 438:	66 27       	eor	r22, r22
 43a:	77 27       	eor	r23, r23
 43c:	cb 01       	movw	r24, r22
 43e:	97 f9       	bld	r25, 7
 440:	08 95       	ret

00000442 <__mulsf3>:
 442:	0e 94 34 02 	call	0x468	; 0x468 <__mulsf3x>
 446:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_round>
 44a:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_pscA>
 44e:	38 f0       	brcs	.+14     	; 0x45e <__mulsf3+0x1c>
 450:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_pscB>
 454:	20 f0       	brcs	.+8      	; 0x45e <__mulsf3+0x1c>
 456:	95 23       	and	r25, r21
 458:	11 f0       	breq	.+4      	; 0x45e <__mulsf3+0x1c>
 45a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 45e:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_nan>
 462:	11 24       	eor	r1, r1
 464:	0c 94 1b 02 	jmp	0x436	; 0x436 <__fp_szero>

00000468 <__mulsf3x>:
 468:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__fp_split3>
 46c:	70 f3       	brcs	.-36     	; 0x44a <__mulsf3+0x8>

0000046e <__mulsf3_pse>:
 46e:	95 9f       	mul	r25, r21
 470:	c1 f3       	breq	.-16     	; 0x462 <__mulsf3+0x20>
 472:	95 0f       	add	r25, r21
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	55 1f       	adc	r21, r21
 478:	62 9f       	mul	r22, r18
 47a:	f0 01       	movw	r30, r0
 47c:	72 9f       	mul	r23, r18
 47e:	bb 27       	eor	r27, r27
 480:	f0 0d       	add	r31, r0
 482:	b1 1d       	adc	r27, r1
 484:	63 9f       	mul	r22, r19
 486:	aa 27       	eor	r26, r26
 488:	f0 0d       	add	r31, r0
 48a:	b1 1d       	adc	r27, r1
 48c:	aa 1f       	adc	r26, r26
 48e:	64 9f       	mul	r22, r20
 490:	66 27       	eor	r22, r22
 492:	b0 0d       	add	r27, r0
 494:	a1 1d       	adc	r26, r1
 496:	66 1f       	adc	r22, r22
 498:	82 9f       	mul	r24, r18
 49a:	22 27       	eor	r18, r18
 49c:	b0 0d       	add	r27, r0
 49e:	a1 1d       	adc	r26, r1
 4a0:	62 1f       	adc	r22, r18
 4a2:	73 9f       	mul	r23, r19
 4a4:	b0 0d       	add	r27, r0
 4a6:	a1 1d       	adc	r26, r1
 4a8:	62 1f       	adc	r22, r18
 4aa:	83 9f       	mul	r24, r19
 4ac:	a0 0d       	add	r26, r0
 4ae:	61 1d       	adc	r22, r1
 4b0:	22 1f       	adc	r18, r18
 4b2:	74 9f       	mul	r23, r20
 4b4:	33 27       	eor	r19, r19
 4b6:	a0 0d       	add	r26, r0
 4b8:	61 1d       	adc	r22, r1
 4ba:	23 1f       	adc	r18, r19
 4bc:	84 9f       	mul	r24, r20
 4be:	60 0d       	add	r22, r0
 4c0:	21 1d       	adc	r18, r1
 4c2:	82 2f       	mov	r24, r18
 4c4:	76 2f       	mov	r23, r22
 4c6:	6a 2f       	mov	r22, r26
 4c8:	11 24       	eor	r1, r1
 4ca:	9f 57       	subi	r25, 0x7F	; 127
 4cc:	50 40       	sbci	r21, 0x00	; 0
 4ce:	9a f0       	brmi	.+38     	; 0x4f6 <__mulsf3_pse+0x88>
 4d0:	f1 f0       	breq	.+60     	; 0x50e <__mulsf3_pse+0xa0>
 4d2:	88 23       	and	r24, r24
 4d4:	4a f0       	brmi	.+18     	; 0x4e8 <__mulsf3_pse+0x7a>
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	bb 1f       	adc	r27, r27
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	50 40       	sbci	r21, 0x00	; 0
 4e6:	a9 f7       	brne	.-22     	; 0x4d2 <__mulsf3_pse+0x64>
 4e8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ea:	51 05       	cpc	r21, r1
 4ec:	80 f0       	brcs	.+32     	; 0x50e <__mulsf3_pse+0xa0>
 4ee:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 4f2:	0c 94 1b 02 	jmp	0x436	; 0x436 <__fp_szero>
 4f6:	5f 3f       	cpi	r21, 0xFF	; 255
 4f8:	e4 f3       	brlt	.-8      	; 0x4f2 <__mulsf3_pse+0x84>
 4fa:	98 3e       	cpi	r25, 0xE8	; 232
 4fc:	d4 f3       	brlt	.-12     	; 0x4f2 <__mulsf3_pse+0x84>
 4fe:	86 95       	lsr	r24
 500:	77 95       	ror	r23
 502:	67 95       	ror	r22
 504:	b7 95       	ror	r27
 506:	f7 95       	ror	r31
 508:	e7 95       	ror	r30
 50a:	9f 5f       	subi	r25, 0xFF	; 255
 50c:	c1 f7       	brne	.-16     	; 0x4fe <__mulsf3_pse+0x90>
 50e:	fe 2b       	or	r31, r30
 510:	88 0f       	add	r24, r24
 512:	91 1d       	adc	r25, r1
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret

0000051c <__fp_inf>:
 51c:	97 f9       	bld	r25, 7
 51e:	9f 67       	ori	r25, 0x7F	; 127
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	08 95       	ret

00000528 <__fp_nan>:
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	08 95       	ret

0000052e <__fp_pscA>:
 52e:	00 24       	eor	r0, r0
 530:	0a 94       	dec	r0
 532:	16 16       	cp	r1, r22
 534:	17 06       	cpc	r1, r23
 536:	18 06       	cpc	r1, r24
 538:	09 06       	cpc	r0, r25
 53a:	08 95       	ret

0000053c <__fp_pscB>:
 53c:	00 24       	eor	r0, r0
 53e:	0a 94       	dec	r0
 540:	12 16       	cp	r1, r18
 542:	13 06       	cpc	r1, r19
 544:	14 06       	cpc	r1, r20
 546:	05 06       	cpc	r0, r21
 548:	08 95       	ret

0000054a <__fp_round>:
 54a:	09 2e       	mov	r0, r25
 54c:	03 94       	inc	r0
 54e:	00 0c       	add	r0, r0
 550:	11 f4       	brne	.+4      	; 0x556 <__fp_round+0xc>
 552:	88 23       	and	r24, r24
 554:	52 f0       	brmi	.+20     	; 0x56a <__fp_round+0x20>
 556:	bb 0f       	add	r27, r27
 558:	40 f4       	brcc	.+16     	; 0x56a <__fp_round+0x20>
 55a:	bf 2b       	or	r27, r31
 55c:	11 f4       	brne	.+4      	; 0x562 <__fp_round+0x18>
 55e:	60 ff       	sbrs	r22, 0
 560:	04 c0       	rjmp	.+8      	; 0x56a <__fp_round+0x20>
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <__umulhisi3>:
 56c:	a2 9f       	mul	r26, r18
 56e:	b0 01       	movw	r22, r0
 570:	b3 9f       	mul	r27, r19
 572:	c0 01       	movw	r24, r0
 574:	a3 9f       	mul	r26, r19
 576:	70 0d       	add	r23, r0
 578:	81 1d       	adc	r24, r1
 57a:	11 24       	eor	r1, r1
 57c:	91 1d       	adc	r25, r1
 57e:	b2 9f       	mul	r27, r18
 580:	70 0d       	add	r23, r0
 582:	81 1d       	adc	r24, r1
 584:	11 24       	eor	r1, r1
 586:	91 1d       	adc	r25, r1
 588:	08 95       	ret

0000058a <printf>:
 58a:	a0 e0       	ldi	r26, 0x00	; 0
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	eb ec       	ldi	r30, 0xCB	; 203
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__prologue_saves__+0x20>
 596:	ae 01       	movw	r20, r28
 598:	4b 5f       	subi	r20, 0xFB	; 251
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	fa 01       	movw	r30, r20
 59e:	61 91       	ld	r22, Z+
 5a0:	71 91       	ld	r23, Z+
 5a2:	af 01       	movw	r20, r30
 5a4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <__iob+0x2>
 5a8:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <__iob+0x3>
 5ac:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vfprintf>
 5b0:	e2 e0       	ldi	r30, 0x02	; 2
 5b2:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__epilogue_restores__+0x20>

000005b6 <vfprintf>:
 5b6:	ab e0       	ldi	r26, 0x0B	; 11
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e1 ee       	ldi	r30, 0xE1	; 225
 5bc:	f2 e0       	ldi	r31, 0x02	; 2
 5be:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__prologue_saves__>
 5c2:	6c 01       	movw	r12, r24
 5c4:	7b 01       	movw	r14, r22
 5c6:	8a 01       	movw	r16, r20
 5c8:	fc 01       	movw	r30, r24
 5ca:	17 82       	std	Z+7, r1	; 0x07
 5cc:	16 82       	std	Z+6, r1	; 0x06
 5ce:	83 81       	ldd	r24, Z+3	; 0x03
 5d0:	81 ff       	sbrs	r24, 1
 5d2:	cc c1       	rjmp	.+920    	; 0x96c <__stack+0x6d>
 5d4:	ce 01       	movw	r24, r28
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	3c 01       	movw	r6, r24
 5da:	f6 01       	movw	r30, r12
 5dc:	93 81       	ldd	r25, Z+3	; 0x03
 5de:	f7 01       	movw	r30, r14
 5e0:	93 fd       	sbrc	r25, 3
 5e2:	85 91       	lpm	r24, Z+
 5e4:	93 ff       	sbrs	r25, 3
 5e6:	81 91       	ld	r24, Z+
 5e8:	7f 01       	movw	r14, r30
 5ea:	88 23       	and	r24, r24
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <vfprintf+0x3a>
 5ee:	ba c1       	rjmp	.+884    	; 0x964 <__stack+0x65>
 5f0:	85 32       	cpi	r24, 0x25	; 37
 5f2:	39 f4       	brne	.+14     	; 0x602 <vfprintf+0x4c>
 5f4:	93 fd       	sbrc	r25, 3
 5f6:	85 91       	lpm	r24, Z+
 5f8:	93 ff       	sbrs	r25, 3
 5fa:	81 91       	ld	r24, Z+
 5fc:	7f 01       	movw	r14, r30
 5fe:	85 32       	cpi	r24, 0x25	; 37
 600:	29 f4       	brne	.+10     	; 0x60c <vfprintf+0x56>
 602:	b6 01       	movw	r22, r12
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 60a:	e7 cf       	rjmp	.-50     	; 0x5da <vfprintf+0x24>
 60c:	91 2c       	mov	r9, r1
 60e:	21 2c       	mov	r2, r1
 610:	31 2c       	mov	r3, r1
 612:	ff e1       	ldi	r31, 0x1F	; 31
 614:	f3 15       	cp	r31, r3
 616:	d8 f0       	brcs	.+54     	; 0x64e <vfprintf+0x98>
 618:	8b 32       	cpi	r24, 0x2B	; 43
 61a:	79 f0       	breq	.+30     	; 0x63a <vfprintf+0x84>
 61c:	38 f4       	brcc	.+14     	; 0x62c <vfprintf+0x76>
 61e:	80 32       	cpi	r24, 0x20	; 32
 620:	79 f0       	breq	.+30     	; 0x640 <vfprintf+0x8a>
 622:	83 32       	cpi	r24, 0x23	; 35
 624:	a1 f4       	brne	.+40     	; 0x64e <vfprintf+0x98>
 626:	23 2d       	mov	r18, r3
 628:	20 61       	ori	r18, 0x10	; 16
 62a:	1d c0       	rjmp	.+58     	; 0x666 <vfprintf+0xb0>
 62c:	8d 32       	cpi	r24, 0x2D	; 45
 62e:	61 f0       	breq	.+24     	; 0x648 <vfprintf+0x92>
 630:	80 33       	cpi	r24, 0x30	; 48
 632:	69 f4       	brne	.+26     	; 0x64e <vfprintf+0x98>
 634:	23 2d       	mov	r18, r3
 636:	21 60       	ori	r18, 0x01	; 1
 638:	16 c0       	rjmp	.+44     	; 0x666 <vfprintf+0xb0>
 63a:	83 2d       	mov	r24, r3
 63c:	82 60       	ori	r24, 0x02	; 2
 63e:	38 2e       	mov	r3, r24
 640:	e3 2d       	mov	r30, r3
 642:	e4 60       	ori	r30, 0x04	; 4
 644:	3e 2e       	mov	r3, r30
 646:	2a c0       	rjmp	.+84     	; 0x69c <vfprintf+0xe6>
 648:	f3 2d       	mov	r31, r3
 64a:	f8 60       	ori	r31, 0x08	; 8
 64c:	1d c0       	rjmp	.+58     	; 0x688 <vfprintf+0xd2>
 64e:	37 fc       	sbrc	r3, 7
 650:	2d c0       	rjmp	.+90     	; 0x6ac <vfprintf+0xf6>
 652:	20 ed       	ldi	r18, 0xD0	; 208
 654:	28 0f       	add	r18, r24
 656:	2a 30       	cpi	r18, 0x0A	; 10
 658:	40 f0       	brcs	.+16     	; 0x66a <vfprintf+0xb4>
 65a:	8e 32       	cpi	r24, 0x2E	; 46
 65c:	b9 f4       	brne	.+46     	; 0x68c <vfprintf+0xd6>
 65e:	36 fc       	sbrc	r3, 6
 660:	81 c1       	rjmp	.+770    	; 0x964 <__stack+0x65>
 662:	23 2d       	mov	r18, r3
 664:	20 64       	ori	r18, 0x40	; 64
 666:	32 2e       	mov	r3, r18
 668:	19 c0       	rjmp	.+50     	; 0x69c <vfprintf+0xe6>
 66a:	36 fe       	sbrs	r3, 6
 66c:	06 c0       	rjmp	.+12     	; 0x67a <vfprintf+0xc4>
 66e:	8a e0       	ldi	r24, 0x0A	; 10
 670:	98 9e       	mul	r9, r24
 672:	20 0d       	add	r18, r0
 674:	11 24       	eor	r1, r1
 676:	92 2e       	mov	r9, r18
 678:	11 c0       	rjmp	.+34     	; 0x69c <vfprintf+0xe6>
 67a:	ea e0       	ldi	r30, 0x0A	; 10
 67c:	2e 9e       	mul	r2, r30
 67e:	20 0d       	add	r18, r0
 680:	11 24       	eor	r1, r1
 682:	22 2e       	mov	r2, r18
 684:	f3 2d       	mov	r31, r3
 686:	f0 62       	ori	r31, 0x20	; 32
 688:	3f 2e       	mov	r3, r31
 68a:	08 c0       	rjmp	.+16     	; 0x69c <vfprintf+0xe6>
 68c:	8c 36       	cpi	r24, 0x6C	; 108
 68e:	21 f4       	brne	.+8      	; 0x698 <vfprintf+0xe2>
 690:	83 2d       	mov	r24, r3
 692:	80 68       	ori	r24, 0x80	; 128
 694:	38 2e       	mov	r3, r24
 696:	02 c0       	rjmp	.+4      	; 0x69c <vfprintf+0xe6>
 698:	88 36       	cpi	r24, 0x68	; 104
 69a:	41 f4       	brne	.+16     	; 0x6ac <vfprintf+0xf6>
 69c:	f7 01       	movw	r30, r14
 69e:	93 fd       	sbrc	r25, 3
 6a0:	85 91       	lpm	r24, Z+
 6a2:	93 ff       	sbrs	r25, 3
 6a4:	81 91       	ld	r24, Z+
 6a6:	7f 01       	movw	r14, r30
 6a8:	81 11       	cpse	r24, r1
 6aa:	b3 cf       	rjmp	.-154    	; 0x612 <vfprintf+0x5c>
 6ac:	98 2f       	mov	r25, r24
 6ae:	9f 7d       	andi	r25, 0xDF	; 223
 6b0:	95 54       	subi	r25, 0x45	; 69
 6b2:	93 30       	cpi	r25, 0x03	; 3
 6b4:	28 f4       	brcc	.+10     	; 0x6c0 <vfprintf+0x10a>
 6b6:	0c 5f       	subi	r16, 0xFC	; 252
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	9f e3       	ldi	r25, 0x3F	; 63
 6bc:	99 83       	std	Y+1, r25	; 0x01
 6be:	0d c0       	rjmp	.+26     	; 0x6da <vfprintf+0x124>
 6c0:	83 36       	cpi	r24, 0x63	; 99
 6c2:	31 f0       	breq	.+12     	; 0x6d0 <vfprintf+0x11a>
 6c4:	83 37       	cpi	r24, 0x73	; 115
 6c6:	71 f0       	breq	.+28     	; 0x6e4 <vfprintf+0x12e>
 6c8:	83 35       	cpi	r24, 0x53	; 83
 6ca:	09 f0       	breq	.+2      	; 0x6ce <vfprintf+0x118>
 6cc:	59 c0       	rjmp	.+178    	; 0x780 <vfprintf+0x1ca>
 6ce:	21 c0       	rjmp	.+66     	; 0x712 <vfprintf+0x15c>
 6d0:	f8 01       	movw	r30, r16
 6d2:	80 81       	ld	r24, Z
 6d4:	89 83       	std	Y+1, r24	; 0x01
 6d6:	0e 5f       	subi	r16, 0xFE	; 254
 6d8:	1f 4f       	sbci	r17, 0xFF	; 255
 6da:	88 24       	eor	r8, r8
 6dc:	83 94       	inc	r8
 6de:	91 2c       	mov	r9, r1
 6e0:	53 01       	movw	r10, r6
 6e2:	13 c0       	rjmp	.+38     	; 0x70a <vfprintf+0x154>
 6e4:	28 01       	movw	r4, r16
 6e6:	f2 e0       	ldi	r31, 0x02	; 2
 6e8:	4f 0e       	add	r4, r31
 6ea:	51 1c       	adc	r5, r1
 6ec:	f8 01       	movw	r30, r16
 6ee:	a0 80       	ld	r10, Z
 6f0:	b1 80       	ldd	r11, Z+1	; 0x01
 6f2:	36 fe       	sbrs	r3, 6
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <vfprintf+0x146>
 6f6:	69 2d       	mov	r22, r9
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <vfprintf+0x14a>
 6fc:	6f ef       	ldi	r22, 0xFF	; 255
 6fe:	7f ef       	ldi	r23, 0xFF	; 255
 700:	c5 01       	movw	r24, r10
 702:	0e 94 c7 04 	call	0x98e	; 0x98e <strnlen>
 706:	4c 01       	movw	r8, r24
 708:	82 01       	movw	r16, r4
 70a:	f3 2d       	mov	r31, r3
 70c:	ff 77       	andi	r31, 0x7F	; 127
 70e:	3f 2e       	mov	r3, r31
 710:	16 c0       	rjmp	.+44     	; 0x73e <vfprintf+0x188>
 712:	28 01       	movw	r4, r16
 714:	22 e0       	ldi	r18, 0x02	; 2
 716:	42 0e       	add	r4, r18
 718:	51 1c       	adc	r5, r1
 71a:	f8 01       	movw	r30, r16
 71c:	a0 80       	ld	r10, Z
 71e:	b1 80       	ldd	r11, Z+1	; 0x01
 720:	36 fe       	sbrs	r3, 6
 722:	03 c0       	rjmp	.+6      	; 0x72a <vfprintf+0x174>
 724:	69 2d       	mov	r22, r9
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <vfprintf+0x178>
 72a:	6f ef       	ldi	r22, 0xFF	; 255
 72c:	7f ef       	ldi	r23, 0xFF	; 255
 72e:	c5 01       	movw	r24, r10
 730:	0e 94 bc 04 	call	0x978	; 0x978 <strnlen_P>
 734:	4c 01       	movw	r8, r24
 736:	f3 2d       	mov	r31, r3
 738:	f0 68       	ori	r31, 0x80	; 128
 73a:	3f 2e       	mov	r3, r31
 73c:	82 01       	movw	r16, r4
 73e:	33 fc       	sbrc	r3, 3
 740:	1b c0       	rjmp	.+54     	; 0x778 <vfprintf+0x1c2>
 742:	82 2d       	mov	r24, r2
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	88 16       	cp	r8, r24
 748:	99 06       	cpc	r9, r25
 74a:	b0 f4       	brcc	.+44     	; 0x778 <vfprintf+0x1c2>
 74c:	b6 01       	movw	r22, r12
 74e:	80 e2       	ldi	r24, 0x20	; 32
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 756:	2a 94       	dec	r2
 758:	f4 cf       	rjmp	.-24     	; 0x742 <vfprintf+0x18c>
 75a:	f5 01       	movw	r30, r10
 75c:	37 fc       	sbrc	r3, 7
 75e:	85 91       	lpm	r24, Z+
 760:	37 fe       	sbrs	r3, 7
 762:	81 91       	ld	r24, Z+
 764:	5f 01       	movw	r10, r30
 766:	b6 01       	movw	r22, r12
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 76e:	21 10       	cpse	r2, r1
 770:	2a 94       	dec	r2
 772:	21 e0       	ldi	r18, 0x01	; 1
 774:	82 1a       	sub	r8, r18
 776:	91 08       	sbc	r9, r1
 778:	81 14       	cp	r8, r1
 77a:	91 04       	cpc	r9, r1
 77c:	71 f7       	brne	.-36     	; 0x75a <vfprintf+0x1a4>
 77e:	e8 c0       	rjmp	.+464    	; 0x950 <__stack+0x51>
 780:	84 36       	cpi	r24, 0x64	; 100
 782:	11 f0       	breq	.+4      	; 0x788 <vfprintf+0x1d2>
 784:	89 36       	cpi	r24, 0x69	; 105
 786:	41 f5       	brne	.+80     	; 0x7d8 <vfprintf+0x222>
 788:	f8 01       	movw	r30, r16
 78a:	37 fe       	sbrs	r3, 7
 78c:	07 c0       	rjmp	.+14     	; 0x79c <vfprintf+0x1e6>
 78e:	60 81       	ld	r22, Z
 790:	71 81       	ldd	r23, Z+1	; 0x01
 792:	82 81       	ldd	r24, Z+2	; 0x02
 794:	93 81       	ldd	r25, Z+3	; 0x03
 796:	0c 5f       	subi	r16, 0xFC	; 252
 798:	1f 4f       	sbci	r17, 0xFF	; 255
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <vfprintf+0x1f6>
 79c:	60 81       	ld	r22, Z
 79e:	71 81       	ldd	r23, Z+1	; 0x01
 7a0:	07 2e       	mov	r0, r23
 7a2:	00 0c       	add	r0, r0
 7a4:	88 0b       	sbc	r24, r24
 7a6:	99 0b       	sbc	r25, r25
 7a8:	0e 5f       	subi	r16, 0xFE	; 254
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	f3 2d       	mov	r31, r3
 7ae:	ff 76       	andi	r31, 0x6F	; 111
 7b0:	3f 2e       	mov	r3, r31
 7b2:	97 ff       	sbrs	r25, 7
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <vfprintf+0x212>
 7b6:	90 95       	com	r25
 7b8:	80 95       	com	r24
 7ba:	70 95       	com	r23
 7bc:	61 95       	neg	r22
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	8f 4f       	sbci	r24, 0xFF	; 255
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	f0 68       	ori	r31, 0x80	; 128
 7c6:	3f 2e       	mov	r3, r31
 7c8:	2a e0       	ldi	r18, 0x0A	; 10
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	a3 01       	movw	r20, r6
 7ce:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__ultoa_invert>
 7d2:	88 2e       	mov	r8, r24
 7d4:	86 18       	sub	r8, r6
 7d6:	45 c0       	rjmp	.+138    	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 7d8:	85 37       	cpi	r24, 0x75	; 117
 7da:	31 f4       	brne	.+12     	; 0x7e8 <vfprintf+0x232>
 7dc:	23 2d       	mov	r18, r3
 7de:	2f 7e       	andi	r18, 0xEF	; 239
 7e0:	b2 2e       	mov	r11, r18
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	25 c0       	rjmp	.+74     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7e8:	93 2d       	mov	r25, r3
 7ea:	99 7f       	andi	r25, 0xF9	; 249
 7ec:	b9 2e       	mov	r11, r25
 7ee:	8f 36       	cpi	r24, 0x6F	; 111
 7f0:	c1 f0       	breq	.+48     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <vfprintf+0x244>
 7f4:	88 35       	cpi	r24, 0x58	; 88
 7f6:	79 f0       	breq	.+30     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7f8:	b5 c0       	rjmp	.+362    	; 0x964 <__stack+0x65>
 7fa:	80 37       	cpi	r24, 0x70	; 112
 7fc:	19 f0       	breq	.+6      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7fe:	88 37       	cpi	r24, 0x78	; 120
 800:	21 f0       	breq	.+8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 802:	b0 c0       	rjmp	.+352    	; 0x964 <__stack+0x65>
 804:	e9 2f       	mov	r30, r25
 806:	e0 61       	ori	r30, 0x10	; 16
 808:	be 2e       	mov	r11, r30
 80a:	b4 fe       	sbrs	r11, 4
 80c:	0d c0       	rjmp	.+26     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 80e:	fb 2d       	mov	r31, r11
 810:	f4 60       	ori	r31, 0x04	; 4
 812:	bf 2e       	mov	r11, r31
 814:	09 c0       	rjmp	.+18     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 816:	34 fe       	sbrs	r3, 4
 818:	0a c0       	rjmp	.+20     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 81a:	29 2f       	mov	r18, r25
 81c:	26 60       	ori	r18, 0x06	; 6
 81e:	b2 2e       	mov	r11, r18
 820:	06 c0       	rjmp	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 822:	28 e0       	ldi	r18, 0x08	; 8
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	05 c0       	rjmp	.+10     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 828:	20 e1       	ldi	r18, 0x10	; 16
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	20 e1       	ldi	r18, 0x10	; 16
 830:	32 e0       	ldi	r19, 0x02	; 2
 832:	f8 01       	movw	r30, r16
 834:	b7 fe       	sbrs	r11, 7
 836:	07 c0       	rjmp	.+14     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	0c 5f       	subi	r16, 0xFC	; 252
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	06 c0       	rjmp	.+12     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	a3 01       	movw	r20, r6
 854:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__ultoa_invert>
 858:	88 2e       	mov	r8, r24
 85a:	86 18       	sub	r8, r6
 85c:	fb 2d       	mov	r31, r11
 85e:	ff 77       	andi	r31, 0x7F	; 127
 860:	3f 2e       	mov	r3, r31
 862:	36 fe       	sbrs	r3, 6
 864:	0d c0       	rjmp	.+26     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 866:	23 2d       	mov	r18, r3
 868:	2e 7f       	andi	r18, 0xFE	; 254
 86a:	a2 2e       	mov	r10, r18
 86c:	89 14       	cp	r8, r9
 86e:	58 f4       	brcc	.+22     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 870:	34 fe       	sbrs	r3, 4
 872:	0b c0       	rjmp	.+22     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 874:	32 fc       	sbrc	r3, 2
 876:	09 c0       	rjmp	.+18     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 878:	83 2d       	mov	r24, r3
 87a:	8e 7e       	andi	r24, 0xEE	; 238
 87c:	a8 2e       	mov	r10, r24
 87e:	05 c0       	rjmp	.+10     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 880:	b8 2c       	mov	r11, r8
 882:	a3 2c       	mov	r10, r3
 884:	03 c0       	rjmp	.+6      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 886:	b8 2c       	mov	r11, r8
 888:	01 c0       	rjmp	.+2      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 88a:	b9 2c       	mov	r11, r9
 88c:	a4 fe       	sbrs	r10, 4
 88e:	0f c0       	rjmp	.+30     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 890:	fe 01       	movw	r30, r28
 892:	e8 0d       	add	r30, r8
 894:	f1 1d       	adc	r31, r1
 896:	80 81       	ld	r24, Z
 898:	80 33       	cpi	r24, 0x30	; 48
 89a:	21 f4       	brne	.+8      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 89c:	9a 2d       	mov	r25, r10
 89e:	99 7e       	andi	r25, 0xE9	; 233
 8a0:	a9 2e       	mov	r10, r25
 8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8a4:	a2 fe       	sbrs	r10, 2
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8a8:	b3 94       	inc	r11
 8aa:	b3 94       	inc	r11
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8ae:	8a 2d       	mov	r24, r10
 8b0:	86 78       	andi	r24, 0x86	; 134
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8b4:	b3 94       	inc	r11
 8b6:	a3 fc       	sbrc	r10, 3
 8b8:	11 c0       	rjmp	.+34     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ba:	a0 fe       	sbrs	r10, 0
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8be:	b2 14       	cp	r11, r2
 8c0:	88 f4       	brcc	.+34     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8c2:	28 0c       	add	r2, r8
 8c4:	92 2c       	mov	r9, r2
 8c6:	9b 18       	sub	r9, r11
 8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8ca:	b2 14       	cp	r11, r2
 8cc:	60 f4       	brcc	.+24     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8ce:	b6 01       	movw	r22, r12
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 8d8:	b3 94       	inc	r11
 8da:	f7 cf       	rjmp	.-18     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8dc:	b2 14       	cp	r11, r2
 8de:	18 f4       	brcc	.+6      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8e0:	2b 18       	sub	r2, r11
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8e4:	98 2c       	mov	r9, r8
 8e6:	21 2c       	mov	r2, r1
 8e8:	a4 fe       	sbrs	r10, 4
 8ea:	10 c0       	rjmp	.+32     	; 0x90c <__stack+0xd>
 8ec:	b6 01       	movw	r22, r12
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 8f6:	a2 fe       	sbrs	r10, 2
 8f8:	17 c0       	rjmp	.+46     	; 0x928 <__stack+0x29>
 8fa:	a1 fc       	sbrc	r10, 1
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <__stack+0x5>
 8fe:	88 e7       	ldi	r24, 0x78	; 120
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
 904:	88 e5       	ldi	r24, 0x58	; 88
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	b6 01       	movw	r22, r12
 90a:	0c c0       	rjmp	.+24     	; 0x924 <__stack+0x25>
 90c:	8a 2d       	mov	r24, r10
 90e:	86 78       	andi	r24, 0x86	; 134
 910:	59 f0       	breq	.+22     	; 0x928 <__stack+0x29>
 912:	a1 fe       	sbrs	r10, 1
 914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
 916:	8b e2       	ldi	r24, 0x2B	; 43
 918:	01 c0       	rjmp	.+2      	; 0x91c <__stack+0x1d>
 91a:	80 e2       	ldi	r24, 0x20	; 32
 91c:	a7 fc       	sbrc	r10, 7
 91e:	8d e2       	ldi	r24, 0x2D	; 45
 920:	b6 01       	movw	r22, r12
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 928:	89 14       	cp	r8, r9
 92a:	38 f4       	brcc	.+14     	; 0x93a <__stack+0x3b>
 92c:	b6 01       	movw	r22, r12
 92e:	80 e3       	ldi	r24, 0x30	; 48
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 936:	9a 94       	dec	r9
 938:	f7 cf       	rjmp	.-18     	; 0x928 <__stack+0x29>
 93a:	8a 94       	dec	r8
 93c:	f3 01       	movw	r30, r6
 93e:	e8 0d       	add	r30, r8
 940:	f1 1d       	adc	r31, r1
 942:	80 81       	ld	r24, Z
 944:	b6 01       	movw	r22, r12
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 94c:	81 10       	cpse	r8, r1
 94e:	f5 cf       	rjmp	.-22     	; 0x93a <__stack+0x3b>
 950:	22 20       	and	r2, r2
 952:	09 f4       	brne	.+2      	; 0x956 <__stack+0x57>
 954:	42 ce       	rjmp	.-892    	; 0x5da <vfprintf+0x24>
 956:	b6 01       	movw	r22, r12
 958:	80 e2       	ldi	r24, 0x20	; 32
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 960:	2a 94       	dec	r2
 962:	f6 cf       	rjmp	.-20     	; 0x950 <__stack+0x51>
 964:	f6 01       	movw	r30, r12
 966:	86 81       	ldd	r24, Z+6	; 0x06
 968:	97 81       	ldd	r25, Z+7	; 0x07
 96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
 96c:	8f ef       	ldi	r24, 0xFF	; 255
 96e:	9f ef       	ldi	r25, 0xFF	; 255
 970:	2b 96       	adiw	r28, 0x0b	; 11
 972:	e2 e1       	ldi	r30, 0x12	; 18
 974:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__epilogue_restores__>

00000978 <strnlen_P>:
 978:	fc 01       	movw	r30, r24
 97a:	05 90       	lpm	r0, Z+
 97c:	61 50       	subi	r22, 0x01	; 1
 97e:	70 40       	sbci	r23, 0x00	; 0
 980:	01 10       	cpse	r0, r1
 982:	d8 f7       	brcc	.-10     	; 0x97a <strnlen_P+0x2>
 984:	80 95       	com	r24
 986:	90 95       	com	r25
 988:	8e 0f       	add	r24, r30
 98a:	9f 1f       	adc	r25, r31
 98c:	08 95       	ret

0000098e <strnlen>:
 98e:	fc 01       	movw	r30, r24
 990:	61 50       	subi	r22, 0x01	; 1
 992:	70 40       	sbci	r23, 0x00	; 0
 994:	01 90       	ld	r0, Z+
 996:	01 10       	cpse	r0, r1
 998:	d8 f7       	brcc	.-10     	; 0x990 <strnlen+0x2>
 99a:	80 95       	com	r24
 99c:	90 95       	com	r25
 99e:	8e 0f       	add	r24, r30
 9a0:	9f 1f       	adc	r25, r31
 9a2:	08 95       	ret

000009a4 <fputc>:
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	fb 01       	movw	r30, r22
 9ae:	23 81       	ldd	r18, Z+3	; 0x03
 9b0:	21 fd       	sbrc	r18, 1
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <fputc+0x16>
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	9f ef       	ldi	r25, 0xFF	; 255
 9b8:	2c c0       	rjmp	.+88     	; 0xa12 <fputc+0x6e>
 9ba:	22 ff       	sbrs	r18, 2
 9bc:	16 c0       	rjmp	.+44     	; 0x9ea <fputc+0x46>
 9be:	46 81       	ldd	r20, Z+6	; 0x06
 9c0:	57 81       	ldd	r21, Z+7	; 0x07
 9c2:	24 81       	ldd	r18, Z+4	; 0x04
 9c4:	35 81       	ldd	r19, Z+5	; 0x05
 9c6:	42 17       	cp	r20, r18
 9c8:	53 07       	cpc	r21, r19
 9ca:	44 f4       	brge	.+16     	; 0x9dc <fputc+0x38>
 9cc:	a0 81       	ld	r26, Z
 9ce:	b1 81       	ldd	r27, Z+1	; 0x01
 9d0:	9d 01       	movw	r18, r26
 9d2:	2f 5f       	subi	r18, 0xFF	; 255
 9d4:	3f 4f       	sbci	r19, 0xFF	; 255
 9d6:	31 83       	std	Z+1, r19	; 0x01
 9d8:	20 83       	st	Z, r18
 9da:	8c 93       	st	X, r24
 9dc:	26 81       	ldd	r18, Z+6	; 0x06
 9de:	37 81       	ldd	r19, Z+7	; 0x07
 9e0:	2f 5f       	subi	r18, 0xFF	; 255
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
 9e4:	37 83       	std	Z+7, r19	; 0x07
 9e6:	26 83       	std	Z+6, r18	; 0x06
 9e8:	14 c0       	rjmp	.+40     	; 0xa12 <fputc+0x6e>
 9ea:	8b 01       	movw	r16, r22
 9ec:	ec 01       	movw	r28, r24
 9ee:	fb 01       	movw	r30, r22
 9f0:	00 84       	ldd	r0, Z+8	; 0x08
 9f2:	f1 85       	ldd	r31, Z+9	; 0x09
 9f4:	e0 2d       	mov	r30, r0
 9f6:	09 95       	icall
 9f8:	89 2b       	or	r24, r25
 9fa:	e1 f6       	brne	.-72     	; 0x9b4 <fputc+0x10>
 9fc:	d8 01       	movw	r26, r16
 9fe:	16 96       	adiw	r26, 0x06	; 6
 a00:	8d 91       	ld	r24, X+
 a02:	9c 91       	ld	r25, X
 a04:	17 97       	sbiw	r26, 0x07	; 7
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	17 96       	adiw	r26, 0x07	; 7
 a0a:	9c 93       	st	X, r25
 a0c:	8e 93       	st	-X, r24
 a0e:	16 97       	sbiw	r26, 0x06	; 6
 a10:	ce 01       	movw	r24, r28
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	1f 91       	pop	r17
 a18:	0f 91       	pop	r16
 a1a:	08 95       	ret

00000a1c <__ultoa_invert>:
 a1c:	fa 01       	movw	r30, r20
 a1e:	aa 27       	eor	r26, r26
 a20:	28 30       	cpi	r18, 0x08	; 8
 a22:	51 f1       	breq	.+84     	; 0xa78 <__ultoa_invert+0x5c>
 a24:	20 31       	cpi	r18, 0x10	; 16
 a26:	81 f1       	breq	.+96     	; 0xa88 <__ultoa_invert+0x6c>
 a28:	e8 94       	clt
 a2a:	6f 93       	push	r22
 a2c:	6e 7f       	andi	r22, 0xFE	; 254
 a2e:	6e 5f       	subi	r22, 0xFE	; 254
 a30:	7f 4f       	sbci	r23, 0xFF	; 255
 a32:	8f 4f       	sbci	r24, 0xFF	; 255
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	af 4f       	sbci	r26, 0xFF	; 255
 a38:	b1 e0       	ldi	r27, 0x01	; 1
 a3a:	3e d0       	rcall	.+124    	; 0xab8 <__ultoa_invert+0x9c>
 a3c:	b4 e0       	ldi	r27, 0x04	; 4
 a3e:	3c d0       	rcall	.+120    	; 0xab8 <__ultoa_invert+0x9c>
 a40:	67 0f       	add	r22, r23
 a42:	78 1f       	adc	r23, r24
 a44:	89 1f       	adc	r24, r25
 a46:	9a 1f       	adc	r25, r26
 a48:	a1 1d       	adc	r26, r1
 a4a:	68 0f       	add	r22, r24
 a4c:	79 1f       	adc	r23, r25
 a4e:	8a 1f       	adc	r24, r26
 a50:	91 1d       	adc	r25, r1
 a52:	a1 1d       	adc	r26, r1
 a54:	6a 0f       	add	r22, r26
 a56:	71 1d       	adc	r23, r1
 a58:	81 1d       	adc	r24, r1
 a5a:	91 1d       	adc	r25, r1
 a5c:	a1 1d       	adc	r26, r1
 a5e:	20 d0       	rcall	.+64     	; 0xaa0 <__ultoa_invert+0x84>
 a60:	09 f4       	brne	.+2      	; 0xa64 <__ultoa_invert+0x48>
 a62:	68 94       	set
 a64:	3f 91       	pop	r19
 a66:	2a e0       	ldi	r18, 0x0A	; 10
 a68:	26 9f       	mul	r18, r22
 a6a:	11 24       	eor	r1, r1
 a6c:	30 19       	sub	r19, r0
 a6e:	30 5d       	subi	r19, 0xD0	; 208
 a70:	31 93       	st	Z+, r19
 a72:	de f6       	brtc	.-74     	; 0xa2a <__ultoa_invert+0xe>
 a74:	cf 01       	movw	r24, r30
 a76:	08 95       	ret
 a78:	46 2f       	mov	r20, r22
 a7a:	47 70       	andi	r20, 0x07	; 7
 a7c:	40 5d       	subi	r20, 0xD0	; 208
 a7e:	41 93       	st	Z+, r20
 a80:	b3 e0       	ldi	r27, 0x03	; 3
 a82:	0f d0       	rcall	.+30     	; 0xaa2 <__ultoa_invert+0x86>
 a84:	c9 f7       	brne	.-14     	; 0xa78 <__ultoa_invert+0x5c>
 a86:	f6 cf       	rjmp	.-20     	; 0xa74 <__ultoa_invert+0x58>
 a88:	46 2f       	mov	r20, r22
 a8a:	4f 70       	andi	r20, 0x0F	; 15
 a8c:	40 5d       	subi	r20, 0xD0	; 208
 a8e:	4a 33       	cpi	r20, 0x3A	; 58
 a90:	18 f0       	brcs	.+6      	; 0xa98 <__ultoa_invert+0x7c>
 a92:	49 5d       	subi	r20, 0xD9	; 217
 a94:	31 fd       	sbrc	r19, 1
 a96:	40 52       	subi	r20, 0x20	; 32
 a98:	41 93       	st	Z+, r20
 a9a:	02 d0       	rcall	.+4      	; 0xaa0 <__ultoa_invert+0x84>
 a9c:	a9 f7       	brne	.-22     	; 0xa88 <__ultoa_invert+0x6c>
 a9e:	ea cf       	rjmp	.-44     	; 0xa74 <__ultoa_invert+0x58>
 aa0:	b4 e0       	ldi	r27, 0x04	; 4
 aa2:	a6 95       	lsr	r26
 aa4:	97 95       	ror	r25
 aa6:	87 95       	ror	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	ba 95       	dec	r27
 aae:	c9 f7       	brne	.-14     	; 0xaa2 <__ultoa_invert+0x86>
 ab0:	00 97       	sbiw	r24, 0x00	; 0
 ab2:	61 05       	cpc	r22, r1
 ab4:	71 05       	cpc	r23, r1
 ab6:	08 95       	ret
 ab8:	9b 01       	movw	r18, r22
 aba:	ac 01       	movw	r20, r24
 abc:	0a 2e       	mov	r0, r26
 abe:	06 94       	lsr	r0
 ac0:	57 95       	ror	r21
 ac2:	47 95       	ror	r20
 ac4:	37 95       	ror	r19
 ac6:	27 95       	ror	r18
 ac8:	ba 95       	dec	r27
 aca:	c9 f7       	brne	.-14     	; 0xabe <__ultoa_invert+0xa2>
 acc:	62 0f       	add	r22, r18
 ace:	73 1f       	adc	r23, r19
 ad0:	84 1f       	adc	r24, r20
 ad2:	95 1f       	adc	r25, r21
 ad4:	a0 1d       	adc	r26, r0
 ad6:	08 95       	ret

00000ad8 <__prologue_saves__>:
 ad8:	2f 92       	push	r2
 ada:	3f 92       	push	r3
 adc:	4f 92       	push	r4
 ade:	5f 92       	push	r5
 ae0:	6f 92       	push	r6
 ae2:	7f 92       	push	r7
 ae4:	8f 92       	push	r8
 ae6:	9f 92       	push	r9
 ae8:	af 92       	push	r10
 aea:	bf 92       	push	r11
 aec:	cf 92       	push	r12
 aee:	df 92       	push	r13
 af0:	ef 92       	push	r14
 af2:	ff 92       	push	r15
 af4:	0f 93       	push	r16
 af6:	1f 93       	push	r17
 af8:	cf 93       	push	r28
 afa:	df 93       	push	r29
 afc:	cd b7       	in	r28, 0x3d	; 61
 afe:	de b7       	in	r29, 0x3e	; 62
 b00:	ca 1b       	sub	r28, r26
 b02:	db 0b       	sbc	r29, r27
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	f8 94       	cli
 b08:	de bf       	out	0x3e, r29	; 62
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	cd bf       	out	0x3d, r28	; 61
 b0e:	09 94       	ijmp

00000b10 <__epilogue_restores__>:
 b10:	2a 88       	ldd	r2, Y+18	; 0x12
 b12:	39 88       	ldd	r3, Y+17	; 0x11
 b14:	48 88       	ldd	r4, Y+16	; 0x10
 b16:	5f 84       	ldd	r5, Y+15	; 0x0f
 b18:	6e 84       	ldd	r6, Y+14	; 0x0e
 b1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b20:	aa 84       	ldd	r10, Y+10	; 0x0a
 b22:	b9 84       	ldd	r11, Y+9	; 0x09
 b24:	c8 84       	ldd	r12, Y+8	; 0x08
 b26:	df 80       	ldd	r13, Y+7	; 0x07
 b28:	ee 80       	ldd	r14, Y+6	; 0x06
 b2a:	fd 80       	ldd	r15, Y+5	; 0x05
 b2c:	0c 81       	ldd	r16, Y+4	; 0x04
 b2e:	1b 81       	ldd	r17, Y+3	; 0x03
 b30:	aa 81       	ldd	r26, Y+2	; 0x02
 b32:	b9 81       	ldd	r27, Y+1	; 0x01
 b34:	ce 0f       	add	r28, r30
 b36:	d1 1d       	adc	r29, r1
 b38:	0f b6       	in	r0, 0x3f	; 63
 b3a:	f8 94       	cli
 b3c:	de bf       	out	0x3e, r29	; 62
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	cd bf       	out	0x3d, r28	; 61
 b42:	ed 01       	movw	r28, r26
 b44:	08 95       	ret

00000b46 <_exit>:
 b46:	f8 94       	cli

00000b48 <__stop_program>:
 b48:	ff cf       	rjmp	.-2      	; 0xb48 <__stop_program>
