
Arduino_lcd_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000304  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fc7  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000971  00000000  00000000  00001467  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000795  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c9  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ca  00000000  00000000  00002ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000326b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  8e:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  96:	2b 9a       	sbi	0x05, 3	; 5
  98:	00 00       	nop
  9a:	2b 98       	cbi	0x05, 3	; 5
  9c:	08 95       	ret

0000009e <lcd_write>:
  9e:	cf 93       	push	r28
  a0:	c8 2f       	mov	r28, r24
  a2:	66 23       	and	r22, r22
  a4:	11 f0       	breq	.+4      	; 0xaa <lcd_write+0xc>
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	01 c0       	rjmp	.+2      	; 0xac <lcd_write+0xe>
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	2a 98       	cbi	0x05, 2	; 5
  ae:	53 9a       	sbi	0x0a, 3	; 10
  b0:	54 9a       	sbi	0x0a, 4	; 10
  b2:	55 9a       	sbi	0x0a, 5	; 10
  b4:	56 9a       	sbi	0x0a, 6	; 10
  b6:	5e 98       	cbi	0x0b, 6	; 11
  b8:	5d 98       	cbi	0x0b, 5	; 11
  ba:	5c 98       	cbi	0x0b, 4	; 11
  bc:	5b 98       	cbi	0x0b, 3	; 11
  be:	cc 23       	and	r28, r28
  c0:	0c f4       	brge	.+2      	; 0xc4 <lcd_write+0x26>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	c6 fd       	sbrc	r28, 6
  c6:	5d 9a       	sbi	0x0b, 5	; 11
  c8:	c5 fd       	sbrc	r28, 5
  ca:	5c 9a       	sbi	0x0b, 4	; 11
  cc:	c4 fd       	sbrc	r28, 4
  ce:	5b 9a       	sbi	0x0b, 3	; 11
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  d4:	5e 98       	cbi	0x0b, 6	; 11
  d6:	5d 98       	cbi	0x0b, 5	; 11
  d8:	5c 98       	cbi	0x0b, 4	; 11
  da:	5b 98       	cbi	0x0b, 3	; 11
  dc:	c3 fd       	sbrc	r28, 3
  de:	5e 9a       	sbi	0x0b, 6	; 11
  e0:	c2 fd       	sbrc	r28, 2
  e2:	5d 9a       	sbi	0x0b, 5	; 11
  e4:	c1 fd       	sbrc	r28, 1
  e6:	5c 9a       	sbi	0x0b, 4	; 11
  e8:	c0 fd       	sbrc	r28, 0
  ea:	5b 9a       	sbi	0x0b, 3	; 11
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  f0:	5b 9a       	sbi	0x0b, 3	; 11
  f2:	5c 9a       	sbi	0x0b, 4	; 11
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <lcd_read>:
  fc:	88 23       	and	r24, r24
  fe:	11 f0       	breq	.+4      	; 0x104 <lcd_read+0x8>
 100:	29 9a       	sbi	0x05, 1	; 5
 102:	01 c0       	rjmp	.+2      	; 0x106 <lcd_read+0xa>
 104:	29 98       	cbi	0x05, 1	; 5
 106:	2a 9a       	sbi	0x05, 2	; 5
 108:	53 98       	cbi	0x0a, 3	; 10
 10a:	54 98       	cbi	0x0a, 4	; 10
 10c:	55 98       	cbi	0x0a, 5	; 10
 10e:	56 98       	cbi	0x0a, 6	; 10
 110:	2b 9a       	sbi	0x05, 3	; 5
 112:	00 00       	nop
 114:	4b 9b       	sbis	0x09, 3	; 9
 116:	02 c0       	rjmp	.+4      	; 0x11c <lcd_read+0x20>
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	01 c0       	rjmp	.+2      	; 0x11e <lcd_read+0x22>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	4c 99       	sbic	0x09, 4	; 9
 120:	80 62       	ori	r24, 0x20	; 32
 122:	4d 99       	sbic	0x09, 5	; 9
 124:	80 64       	ori	r24, 0x40	; 64
 126:	4e 99       	sbic	0x09, 6	; 9
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	2b 98       	cbi	0x05, 3	; 5
 12c:	00 00       	nop
 12e:	2b 9a       	sbi	0x05, 3	; 5
 130:	00 00       	nop
 132:	4b 99       	sbic	0x09, 3	; 9
 134:	81 60       	ori	r24, 0x01	; 1
 136:	4c 99       	sbic	0x09, 4	; 9
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	4d 99       	sbic	0x09, 5	; 9
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	4e 99       	sbic	0x09, 6	; 9
 140:	88 60       	ori	r24, 0x08	; 8
 142:	2b 98       	cbi	0x05, 3	; 5
 144:	08 95       	ret

00000146 <lcd_waitbusy>:
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_read>
 14c:	88 23       	and	r24, r24
 14e:	dc f3       	brlt	.-10     	; 0x146 <lcd_waitbusy>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_waitbusy+0xc>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_waitbusy+0xe>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_read>
 15a:	08 95       	ret

0000015c <lcd_command>:
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_waitbusy>
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_write>
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_gotoxy>:
 170:	61 11       	cpse	r22, r1
 172:	04 c0       	rjmp	.+8      	; 0x17c <lcd_gotoxy+0xc>
 174:	80 58       	subi	r24, 0x80	; 128
 176:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 17a:	08 95       	ret
 17c:	80 54       	subi	r24, 0x40	; 64
 17e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 182:	08 95       	ret

00000184 <lcd_clrscr>:
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 18a:	08 95       	ret

0000018c <lcd_putc>:
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
 190:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_waitbusy>
 194:	ca 30       	cpi	r28, 0x0A	; 10
 196:	49 f4       	brne	.+18     	; 0x1aa <lcd_putc+0x1e>
 198:	80 34       	cpi	r24, 0x40	; 64
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <lcd_putc+0x14>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <lcd_putc+0x16>
 1a0:	80 e4       	ldi	r24, 0x40	; 64
 1a2:	80 58       	subi	r24, 0x80	; 128
 1a4:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <lcd_putc+0x26>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_write>
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd_puts>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	29 f0       	breq	.+10     	; 0x1d0 <lcd_puts+0x1a>
 1c6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_putc>
 1ca:	89 91       	ld	r24, Y+
 1cc:	81 11       	cpse	r24, r1
 1ce:	fb cf       	rjmp	.-10     	; 0x1c6 <lcd_puts+0x10>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1da:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1dc:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1de:	23 9a       	sbi	0x04, 3	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1e0:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1e2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1e4:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1e6:	56 9a       	sbi	0x0a, 6	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x16>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init+0x1c>
 1f2:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 1f4:	5c 9a       	sbi	0x0b, 4	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 1f6:	5b 9a       	sbi	0x0b, 3	; 11
    lcd_e_toggle();
 1f8:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 1fc:	81 ee       	ldi	r24, 0xE1	; 225
 1fe:	94 e0       	ldi	r25, 0x04	; 4
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x2a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init+0x30>
 206:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 208:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 20c:	95 e1       	ldi	r25, 0x15	; 21
 20e:	9a 95       	dec	r25
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x38>
 212:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 214:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 218:	85 e1       	ldi	r24, 0x15	; 21
 21a:	8a 95       	dec	r24
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_init+0x44>
 21e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 220:	5b 98       	cbi	0x0b, 3	; 11
    lcd_e_toggle();
 222:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 226:	95 e1       	ldi	r25, 0x15	; 21
 228:	9a 95       	dec	r25
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x52>
 22c:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 22e:	88 e2       	ldi	r24, 0x28	; 40
 230:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 23a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>

}/* lcd_init */
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <main>:
//#include <util/delay.h>
#include "lcd.h"
#include <stdlib.h>

int main(void)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	60 97       	sbiw	r28, 0x10	; 16
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
	lcd_init(LCD_DISP_ON);
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_init>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 268:	4a e0       	ldi	r20, 0x0A	; 10
 26a:	be 01       	movw	r22, r28
 26c:	6f 5f       	subi	r22, 0xFF	; 255
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	93 e0       	ldi	r25, 0x03	; 3
 274:	0e 94 4b 01 	call	0x296	; 0x296 <__itoa_ncheck>
	
	int16_t test_number = 1023;
	char test_char_array[16];
	itoa(test_number, test_char_array, 10);
	
	lcd_clrscr();
 278:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_clrscr>
	
	lcd_puts("Hello World!");
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
	
	lcd_gotoxy(0,1);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_gotoxy>
	lcd_puts(test_char_array);
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
 294:	ff cf       	rjmp	.-2      	; 0x294 <main+0x46>

00000296 <__itoa_ncheck>:
 296:	bb 27       	eor	r27, r27
 298:	4a 30       	cpi	r20, 0x0A	; 10
 29a:	31 f4       	brne	.+12     	; 0x2a8 <__itoa_ncheck+0x12>
 29c:	99 23       	and	r25, r25
 29e:	22 f4       	brpl	.+8      	; 0x2a8 <__itoa_ncheck+0x12>
 2a0:	bd e2       	ldi	r27, 0x2D	; 45
 2a2:	90 95       	com	r25
 2a4:	81 95       	neg	r24
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__utoa_common>

000002ac <__utoa_ncheck>:
 2ac:	bb 27       	eor	r27, r27

000002ae <__utoa_common>:
 2ae:	fb 01       	movw	r30, r22
 2b0:	55 27       	eor	r21, r21
 2b2:	aa 27       	eor	r26, r26
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	aa 1f       	adc	r26, r26
 2ba:	a4 17       	cp	r26, r20
 2bc:	10 f0       	brcs	.+4      	; 0x2c2 <__utoa_common+0x14>
 2be:	a4 1b       	sub	r26, r20
 2c0:	83 95       	inc	r24
 2c2:	50 51       	subi	r21, 0x10	; 16
 2c4:	b9 f7       	brne	.-18     	; 0x2b4 <__utoa_common+0x6>
 2c6:	a0 5d       	subi	r26, 0xD0	; 208
 2c8:	aa 33       	cpi	r26, 0x3A	; 58
 2ca:	08 f0       	brcs	.+2      	; 0x2ce <__utoa_common+0x20>
 2cc:	a9 5d       	subi	r26, 0xD9	; 217
 2ce:	a1 93       	st	Z+, r26
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	79 f7       	brne	.-34     	; 0x2b2 <__utoa_common+0x4>
 2d4:	b1 11       	cpse	r27, r1
 2d6:	b1 93       	st	Z+, r27
 2d8:	11 92       	st	Z+, r1
 2da:	cb 01       	movw	r24, r22
 2dc:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <strrev>

000002e0 <strrev>:
 2e0:	dc 01       	movw	r26, r24
 2e2:	fc 01       	movw	r30, r24
 2e4:	67 2f       	mov	r22, r23
 2e6:	71 91       	ld	r23, Z+
 2e8:	77 23       	and	r23, r23
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <strrev+0x4>
 2ec:	32 97       	sbiw	r30, 0x02	; 2
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <strrev+0x18>
 2f0:	7c 91       	ld	r23, X
 2f2:	6d 93       	st	X+, r22
 2f4:	70 83       	st	Z, r23
 2f6:	62 91       	ld	r22, -Z
 2f8:	ae 17       	cp	r26, r30
 2fa:	bf 07       	cpc	r27, r31
 2fc:	c8 f3       	brcs	.-14     	; 0x2f0 <strrev+0x10>
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
